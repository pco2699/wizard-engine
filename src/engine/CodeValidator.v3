// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Reusable validator that checks well-formedness of Wasm functions' code.
def OUT = Trace.OUT;
class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {
	def codeptr = CodePtr.new(null);
	def parser = WasmParser.new(extensions, limits, module, err, codeptr);
	def instrTracer = if(Trace.validation, InstrTracer.new());
	def locals = Vector<ValueType>.new();
	def val_stack = ArrayStack<ValueType>.new();
	def init_status = Vector<InitStatus>.new();
	def ctl_stack = ArrayStack<ControlEntry>.new();
	def ctlxfer = SidetableBuilder.new();
	def ex_handlers = Vector<ExHandlerEntry>.new();
	var ctl_top: ControlEntry;  // FAST: cache of top of control stack
	var func_start_pos: int;
	var func: FuncDecl;
	var sig: SigDecl;
	var opcode_pos: int;

	new() {
		codeptr.onError = err.onDataReaderError;
	}

	def validateFunc(f: FuncDecl) -> CodeValidatorResult {
		codeptr.reset(f.orig_bytecode, 0, f.orig_bytecode.length);
		return validate(f, codeptr);
	}
	def validate(func: FuncDecl, d: DataReader) -> CodeValidatorResult {
		// Metric collection: only call System.ticksUs() if time metric enabled.
		var time_metric = Metrics.validate_time_us;
		var before_us = if(time_metric.enabled, System.ticksUs());

		// Reset internal state.
		this.func = func;
		sig = func.sig;
		if (Trace.validation) OUT.put2("validate(func #%d: %q)", func.func_index, sig.render).outln();
		codeptr.reset(d.data, d.pos, d.limit);
		parser.reset(codeptr);
		func_start_pos = d.pos;
		err.section = BpSection.Code;
		err.index = func.func_index;
		ctl_stack.clear();
		val_stack.clear();
		ctlxfer.reset(codeptr.pos);
		ex_handlers.resize(0);

		// Setup params.
		locals.resize(0);
		init_status.resize(0);
		locals.puta(sig.params);
		init_status.putn(InitStatus.INIT, sig.params.length);

		// Read and initialize locals.
		if (!readLocals(locals)) return reterr();
		func.num_locals = u16.!(locals.length);

		// Push initial control.
		opcode_pos = codeptr.pos;
		pushControl(Opcode.UNREACHABLE.code, sig.params, sig.results, 0);

		// Run validation.
		validateCode();

		// Check function body is properly terminated.
		if (ctl_stack.top != 0 && err.ok()) {
			// TODO: double-check this error position
			err.rel(codeptr, func.orig_bytecode.length).UnterminatedFunctionBody();
		}

		// Extract sidetable.
		func.sidetable = ctlxfer.extract();
		if (ex_handlers.length > 0) func.handlers = ex_handlers.extract();

		// Report metrics and return success.
		if (err.ok()) {
			// Metric collection.
			if (time_metric.enabled) time_metric.val += u32.view(System.ticksUs() - before_us);
			Metrics.validate_bytes.val += u32.view(func.orig_bytecode.length);
			// Return success.
			return CodeValidatorResult.Ok;
		}
		return reterr();
	}
	def readLocals(vec: Vector<ValueType>) -> bool {
		var start = vec.length, max = limits.max_num_locals;
		var dcount = parser.readU32("local decl count", max);
		for (i < dcount) {
			var pt = codeptr.pos;
			var count = parser.readU32("local count", max);
			var pt2 = codeptr.pos;
			var ltype = parser.readValueType();
			var init = if(ValueTypes.hasDefaultValue(ltype), InitStatus.INIT, InitStatus.UNINIT);
			if (count <= limits.max_num_locals) init_status.putn(init, int.view(count));
			if (!err.ok()) return false;
			if (Trace.validation) traceLocals(count, ltype);
			vec.putn(ltype, int.!(count));
			var size = vec.length - start;
			if (size > max) {
				err.rel(codeptr, pt).QuantityExceededMaximumI("maximum total locals", size, max);
				return false;
			}
		}
		return true;
	}
	def reterr() -> CodeValidatorResult.Error {
		return CodeValidatorResult.Error(err.error_code, err.error_pos, err.error_msg);
	}
	def traceLocals(count: u32, ltype: ValueType) {
		OUT.put2("  locals %d: %q", count, ltype.render).outln();
	}
	def err_atpc() -> ErrorGen {
		return err.rel(codeptr, opcode_pos);
	}
	def validateCode() {
		while (codeptr.pos < codeptr.limit) {
			opcode_pos = codeptr.pos;
			var b = codeptr.peek1();
			var opcode = codeptr.read_opcode();
			if (Trace.validation) { traceOpcode(); traceStack(true); }
			// FAST: Handle short operators (predictable direct branch)
			if (Opcodes.attributes[b].SHORT_OP) {
				checkSignature(opcode.sig);
				if (Trace.validation) traceStack(false);
				continue;
			}
			// Handle all other operators in the switch (indirect branch)
			match (opcode) {
				CRASH_EXEC, CRASH_COMPILER => {
					if (!checkExtension(Extension.WIZENG, opcode)) return;
					// nop otherwise
				}
				UNREACHABLE => {
					setUnreachable();
				}
				BLOCK => {
					var pr = parser.readBlockType();
					checkArgsAndPushControl(opcode, pr.0, pr.1);
				}
				LOOP => {
					var pr = parser.readBlockType();
					checkArgsAndPushControl(opcode, pr.0, pr.1);
					ctl_top.sidetable_pos = ctlxfer.sidetable.length;
				}
				IF => {
					var pr = parser.readBlockType();
					popE(ValueType.I32);
					var ctl = checkArgsAndPushControl(opcode, pr.0, pr.1);
					ctlxfer.refElse(ctl, opcode_pos);
					ctl_top.reachable = true; // true block now reachable
				}
				ELSE => {
					if (ctl_top.start_opcode != Opcode.IF.code) return err_atpc().MismatchedElse();
					checkArgsAndTransfer();
					resetInit();
					// "else" implicitly goes to end
					ctlxfer.ref0(ctl_top, opcode_pos);
					// branch from "if" will go to instruction after else
					ctlxfer.bindElse(ctl_top, opcode_pos + 1);

					ctl_top.start_opcode = opcode.code;
					ctl_top.reachable = true;
					val_stack.top = ctl_top.val_stack_top;
					pushTypes(ctl_top.params);
				}
				TRY => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					var pr = parser.readBlockType();
					checkArgsAndPushControl(opcode, pr.0, pr.1);
					ctl_top.sidetable_pos = ctlxfer.sidetable.length;
					ctl_top.try_end = -1;
					ctl_top.delegate_pos = opcode_pos + 1;
				}
				CATCH => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					if (ctl_top.start_opcode != Opcode.TRY.code && ctl_top.start_opcode != Opcode.CATCH.code) {
						return err_atpc().MismatchedCatch();
					}
					var range = startExHandler();
					ctl_top.start_opcode = opcode.code;
					ctl_top.delegate_pos = opcode_pos;
					var tag = parser.readTagRef();
					if (tag == null) return;
					ctlxfer.ref0(ctl_top, opcode_pos);  // implicit jump to end of try block
					var ex_slot = findExSlot(null).0;
					ex_handlers.put(ExHandlerEntry(tag.tag_index, range.0, range.1,
						codeptr.pos - func_start_pos, ex_slot, ctl_top.val_stack_top, ctlxfer.sidetable.length));
					checkArgsAndTransfer();
					resetInit();
					val_stack.top = ctl_top.val_stack_top;
					val_stack.pusha(tag.fields);
				}
				THROW => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					var tag = parser.readTagRef();
					if (tag == null) return;
					checkAndPopArgs(tag.fields);
					setUnreachable();
				}
				RETHROW => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					var depth = parser.readLabel();
					var target = getControl(depth);
					var t = findExSlot(target), ex_slot = t.0, found = t.1;
					if (!found || (target.start_opcode != Opcode.CATCH.code &&
						target.start_opcode != Opcode.CATCH_ALL.code)) {
						err_atpc().RethrowNotInCatch();
					}
					var popcount = val_stack.top - ctl_top.val_stack_top;
					ctlxfer.rethrow(ex_slot, popcount);
					setUnreachable();
				}
				END => {
					if (ctl_stack.top == 0) return err_atpc().EmptyControlStack();
					checkArgsAndTransfer();
					var ctl = ctl_stack.peek();
					match (ctl.start_opcode) {
						Opcode.LOOP.code => {
							ctlxfer.bind(ctl, ctl.start_pos, ctl.sidetable_pos);
						}
						Opcode.IF.code => {
							// one-armed if; simulate an empty else clause
							val_stack.top = ctl_top.val_stack_top;
							ctl_top.reachable = true;
							pushTypes(ctl.params); // TODO: write spec test for {if[t] end}
							checkArgsAndTransfer();
							ctlxfer.bindElse(ctl_top, opcode_pos);
							ctlxfer.bind(ctl, opcode_pos, ctlxfer.sidetable.length);
						}
						_ => {
//					var next_pos = codeptr.pos; // target next bytecode if possible
							ctlxfer.bind(ctl, opcode_pos, ctlxfer.sidetable.length);
						}
					}
					resetInit();
					ctl_stack.pop();
					ctl_top = ctl_stack.peek();
				}
				BR => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					ctlxfer.refS(target, opcode_pos, val_stack.top);
					checkAndPopArgs(labelArgs(target));
					setUnreachable();
				}
				BR_IF => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					popE(ValueType.I32);
					ctlxfer.refS(target, opcode_pos, val_stack.top);
					var args = labelArgs(target);
					checkAndPopArgs(args);
					pushTypes(args);
				}
				BR_TABLE => {
					var labels = parser.readLabels();
					popE(ValueType.I32);
					ctlxfer.sidetable.put(labels.length).put(0).put(0).put(0);
					// add refs for all labels and check args
					var arity = -1;
					for (i < labels.length) {
						if (err.error()) return;
						var target = getControl(labels[i]);
						if (target == null) return;
						var args = labelArgs(target);
						if (arity < 0) arity = args.length;
						else if (arity != args.length) err_atpc().BrTableArityMismatch(arity, i, args.length);
						checkTargetArgs(target);
						ctlxfer.refS(target, opcode_pos + i + 1, val_stack.top);
					}
					setUnreachable();
				}
				RETURN => {
					checkAndPopArgs(sig.results);
					setUnreachable();
				}
				CALL => {
					var func = parser.readFuncRef();
					if (func == null) return;
					checkSignature(func.sig);
				}
				CALL_INDIRECT => {
					var sig = parser.readSigRef();
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkSignature(sig);
				}
				RETURN_CALL => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var func = parser.readFuncRef();
					if (func == null) return;
					checkAndPopArgs(func.sig.params);
					checkReturnSig(func.sig.results);
					setUnreachable();
				}
				RETURN_CALL_INDIRECT => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var sig = parser.readSigRef();
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkAndPopArgs(sig.params);
					checkReturnSig(sig.results);
					setUnreachable();
				}
				CALL_REF => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var sig = parser.readSigRef();
					if (sig == null) return;
					popE(ValueTypes.Ref(true, sig)); // XXX: avoid allocation
					checkSignature(sig);
				}
				RETURN_CALL_REF => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var sig = parser.readSigRef();
					if (sig == null) return;
					popE(ValueTypes.Ref(true, sig)); // XXX: avoid allocation
					checkAndPopArgs(sig.params);
					checkReturnSig(sig.results);
					setUnreachable();
				}
				DELEGATE => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					if (ctl_top.start_opcode != Opcode.TRY.code) return err_atpc().MismatchedDelegate();
					var range = startExHandler();
					var depth = parser.readLabel();
					var target = getControl(depth + 1);
					if (target == null) return;
					checkArgsAndTransfer();
					ex_handlers.put(ExHandlerEntry(Modules.EX_TAG_DELEGATE, range.0, range.1,
						target.delegate_pos - func_start_pos, 0, ctl_top.val_stack_top, ctlxfer.sidetable.length));
					ctlxfer.bind(ctl_top, opcode_pos, ctlxfer.sidetable.length);
					resetInit();
					ctl_stack.pop();
					ctl_top = ctl_stack.peek();
				}
				CATCH_ALL => {
					if (!checkExtension(Extension.EXCEPTION_HANDLING, opcode)) return;
					if (ctl_top.start_opcode != Opcode.TRY.code && ctl_top.start_opcode != Opcode.CATCH.code) {
						return err_atpc().MismatchedCatch();
					}
					ctl_top.start_opcode = opcode.code;
					ctl_top.delegate_pos = opcode_pos;
					var range = startExHandler();
					checkArgsAndTransfer();
					ctlxfer.ref0(ctl_top, opcode_pos); // implicit jump to end of try block
					var ex_slot = findExSlot(null).0;
					ex_handlers.put(ExHandlerEntry(Modules.EX_TAG_ALL, range.0, range.1,
						codeptr.pos - func_start_pos, ex_slot, ctl_top.val_stack_top, ctlxfer.sidetable.length));
					resetInit();
					val_stack.top = ctl_top.val_stack_top;
				}
				DROP => {
					popAny();
				}
				SELECT => {
					popE(ValueType.I32);
					var t = popAny();
					var rt = t.0;
					if (!ValueTypes.isNumeric(rt)) err_atpc().IllegalSelectType(rt);
					popE(rt);
					push(rt);
				}
				SELECT_T => {
					var at = parser.readValueTypes("select count", limits.max_num_select_results);
					if (at.length == 0) err_atpc().IllegalSelectCount();
					popE(ValueType.I32);
					checkAndPopArgs(at);
					checkAndPopArgs(at);
					pushTypes(at);
				}
				LOCAL_GET => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					checkInit(index);
					push(t);
				}
				LOCAL_SET => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					setInit(index);
					popE(t);
				}
				LOCAL_TEE => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					setInit(index);
					popE(t);
					push(t);
				}
				GLOBAL_GET => {
					var g = parser.readGlobalRef();
					if (g == null) return;
					push(g.valtype);
				}
				GLOBAL_SET => {
					var g = parser.readGlobalRef();
					if (g == null) return;
					if (!g.mutable) {
						err_atpc().IllegalAssignmentToImmutableGlobal(g.global_index);
 					}
					popE(g.valtype);
				}
				TABLE_GET => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(ValueType.I32);
					push(table.elemtype);
				}
				TABLE_SET => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(table.elemtype);
					popE(ValueType.I32);
				}

				I32_LOAD8_S,
				I32_LOAD8_U	=> checkLoad(opcode, 0, ValueType.I32);
				I64_LOAD8_S,
				I64_LOAD8_U	=> checkLoad(opcode, 0, ValueType.I64);
				I32_STORE8	=> checkStore(opcode, 0, ValueType.I32);
				I64_STORE8	=> checkStore(opcode, 0, ValueType.I64);

				I32_LOAD16_S,
				I32_LOAD16_U	=> checkLoad(opcode, 1, ValueType.I32);
				I64_LOAD16_S,
				I64_LOAD16_U	=> checkLoad(opcode, 1, ValueType.I64);
				I32_STORE16	=> checkStore(opcode, 1, ValueType.I32);
				I64_STORE16	=> checkStore(opcode, 1, ValueType.I64);

				I32_LOAD	=> checkLoad(opcode, 2, ValueType.I32);
				F32_LOAD 	=> checkLoad(opcode, 2, ValueType.F32);
				I64_LOAD32_S,
				I64_LOAD32_U	=> checkLoad(opcode, 2, ValueType.I64);
				I32_STORE	=> checkStore(opcode, 2, ValueType.I32);
				F32_STORE	=> checkStore(opcode, 2, ValueType.F32);
				I64_STORE32	=> checkStore(opcode, 2, ValueType.I64);

				I64_LOAD	=> checkLoad(opcode, 3, ValueType.I64);
				F64_LOAD	=> checkLoad(opcode, 3, ValueType.F64);
				I64_STORE	=> checkStore(opcode, 3, ValueType.I64);
				F64_STORE	=> checkStore(opcode, 3, ValueType.F64);

				MEMORY_SIZE,
				MEMORY_GROW => {
					var index = parser.readMemoryImm();
					checkSignature(opcode.sig);
				}
				I32_CONST => {
					codeptr.read_sleb32();
					push(ValueType.I32);
				}
				I64_CONST => {
					codeptr.read_sleb64();
					push(ValueType.I64);
				}
				F32_CONST => {
					codeptr.skipN(4);
					push(ValueType.F32);
				}
				F64_CONST => {
					codeptr.skipN(8);
					push(ValueType.F64);
				}
				REF_NULL => {
					var ht = parser.readHeapType();
					push(ValueType.Ref(true, ht));
				}
				REF_IS_NULL => {
					popRef();
					push(ValueType.I32);
				}
				REF_FUNC => {
					var func = parser.readFuncRef();
					if (func == null) return;
					if (!func.reffed) err_atpc().IllegalFuncRef(func);
					var ftype = if(extensions.FUNCTION_REFERENCES,
						ValueTypes.RefFunc(false, func.sig),
						ValueTypes.FUNCREF);
					push(ftype);
				}
				REF_AS_NON_NULL => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAny();
					if (t.1) push(asNonNullRefType(t.0));
				}
				BR_ON_NULL,
				BR_ON_NON_NULL => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					var t = popAny();
					if (t.1) {
						var rt = t.0, nonnull = asNonNullRefType(rt);
						if (opcode.code == Opcode.BR_ON_NON_NULL.code) {
							push(nonnull);
							ctlxfer.refS(target, opcode_pos, val_stack.top);
							checkTargetArgs(target);
							popAny();
						} else {
							ctlxfer.refS(target, opcode_pos, val_stack.top);
							checkTargetArgs(target);
							push(nonnull);
						}
					}
				}
				REF_EQ => {
					if (noGC(opcode)) return;
					popE(ValueTypes.EQREF);
					popE(ValueTypes.EQREF);
					push(ValueType.I32);
				}
				STRUCT_NEW_CANON => {
					if (noGC(opcode)) return;
					var st = parser.readStructType();
					if (st == null) return;
					checkAndPopFields(st.field_types);
					push(ValueTypes.RefStruct(false, st));
				}
				STRUCT_NEW_CANON_DEFAULT => {
					if (noGC(opcode)) return;
					var st = parser.readStructType();
					if (st == null) return;
					var stt = ValueTypes.RefStruct(false, st);
					if (!st.defaultable) err_atpc().ExpectedDefaultableHeapType(stt);
					push(stt);
				}
				STRUCT_GET => {
					if (noGC(opcode)) return;
					var st = parser.readStructType();
					var index = parser.readFieldIndex(st);
					if (index < 0) return;
					popE(ValueTypes.RefStruct(true, st));
					var ft = st.field_types[index];
					if (ft.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(ft);
					push(ft.valtype);
				}
				STRUCT_GET_S, // fallthrough
				STRUCT_GET_U => {
					if (noGC(opcode)) return;
					var st = parser.readStructType();
					var index = parser.readFieldIndex(st);
					if (index < 0) return;
					popE(ValueTypes.RefStruct(true, st));
					var ft = st.field_types[index];
					if (ft.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(ft);
					push(ft.valtype);
				}
				STRUCT_SET => {
					if (noGC(opcode)) return;
					var st = parser.readStructType();
					var index = parser.readFieldIndex(st);
					if (index < 0) return;
					var ft = st.field_types[index];
					var stt = ValueTypes.RefStruct(true, st);
					if (!ft.mutable) {
						err_atpc().IllegalAssignmentToImmutableField(stt, u32.view(index));
					}
					popE(ft.valtype);
					popE(stt);
				}
				ARRAY_NEW_CANON => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					popE(ValueType.I32);
					checkAndPopFields(at.elem_types);
					push(ValueTypes.RefArray(false, at));
				}
				ARRAY_NEW_CANON_DEFAULT => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					var att = ValueTypes.RefArray(false, at);
					if (!at.defaultable) err_atpc().ExpectedDefaultableHeapType(att);
					popE(ValueType.I32);
					push(att);
				}
				ARRAY_GET => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					popE(ValueType.I32);
					popE(ValueTypes.RefArray(true, at));
					for (et in at.elem_types) {
						if (et.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(et);
						push(et.valtype);
					}
				}
				ARRAY_GET_S, // fallthrough
				ARRAY_GET_U => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					popE(ValueType.I32);
					popE(ValueTypes.RefArray(true, at));
					for (et in at.elem_types) {
						if (et.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(et);
						push(et.valtype);
					}
				}
				ARRAY_SET => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					for (et in at.elem_types) {
						if (!et.mutable) err_atpc().IllegalAssignmentToImmutableArray(ValueType.Ref(true, HeapType.Array(at)));
						popE(et.valtype);
					}
					popE(ValueType.I32);
					popE(ValueTypes.RefArray(true, at));
				}
				ARRAY_LEN => {
					if (noGC(opcode)) return;
					popE(ValueTypes.ARRAYREF);
					push(ValueType.I32);
				}
				ARRAY_NEW_CANON_FIXED => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					var size = codeptr.read_uleb32();
					for (i < size) checkAndPopFields(at.elem_types);
					push(ValueTypes.RefArray(false, at));
				}
				ARRAY_NEW_CANON_DATA => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					var index = parser.readDataIndex();
					for (et in at.elem_types) {
						if (!ValueTypes.isPrimitive(et.valtype)) err_atpc().IllegalNonPrimitiveArray(at);
					}
					popE(ValueType.I32);
					popE(ValueType.I32);
					push(ValueTypes.RefArray(false, at));
				}
				ARRAY_NEW_CANON_ELEM => {
					if (noGC(opcode)) return;
					var at = parser.readArrayType();
					if (at == null) return;
					var elem = parser.readElemRef();
					if (elem == null) return;
					if (!ValueTypes.isAssignable(elem.elemtype, at.elem_types[0].valtype)) {
						err_atpc().ElementTypeMismatch(at.elem_types[0].valtype, elem.elemtype);
					}
					popE(ValueType.I32);
					popE(ValueType.I32);
					push(ValueTypes.RefArray(false, at));
				}
				I31_NEW => {
					if (noGC(opcode)) return;
					popE(ValueType.I32);
					push(ValueTypes.I31REF_NONNULL);
				}
				I31_GET_S => {
					if (noGC(opcode)) return;
					popE(ValueTypes.I31REF);
					push(ValueType.I32);
				}
				I31_GET_U => {
					if (noGC(opcode)) return;
					popE(ValueTypes.I31REF);
					push(ValueType.I32);
				}
				REF_TEST,
				REF_TEST_NULL => {
					if (noGC(opcode)) return;
					var nullable = (opcode.code == Opcode.REF_TEST_NULL.code);
					var ht = parser.readHeapType();
					var ref = popRef();
					push(ValueType.I32);
				}
				REF_CAST,
				REF_CAST_NULL => {
					if (noGC(opcode)) return;
					var nullable = (opcode.code == Opcode.REF_CAST_NULL.code);
					var ht = parser.readHeapType();
					var ref = popRef();
					push(ValueType.Ref(nullable, ht));
				}
				BR_ON_CAST,
				BR_ON_CAST_NULL => {
					if (noGC(opcode)) return;
					var nullable = (opcode.code == Opcode.BR_ON_CAST_NULL.code);
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					var ht = parser.readHeapType();
					ctlxfer.refS(target, opcode_pos, val_stack.top);
					var ref = popRef();
					push(ValueType.Ref(nullable, ht));
					checkAndPopArgs(labelArgs(target));
					push(ref.0);  // leave original value
				}
				BR_ON_CAST_FAIL,
				BR_ON_CAST_FAIL_NULL=> {
					if (noGC(opcode)) return;
					var nullable = (opcode.code == Opcode.BR_ON_CAST_FAIL_NULL.code);
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					var ht = parser.readHeapType();
					ctlxfer.refS(target, opcode_pos, val_stack.top);
					var ref = popRef();
					push(ref.0); // leave original value
					checkAndPopArgs(labelArgs(target));
					push(ValueType.Ref(nullable, ht));
				}
				EXTERN_INTERNALIZE => {
					if (noGC(opcode)) return;
					if (!checkExtension(Extension.GC, opcode)) return;
					var nullable = popRefE(ValueTypes.EXTERNREF);
					var at = if(nullable, ValueTypes.ANYREF, ValueTypes.ANYREF_NONNULL);
					push(at);
				}
				EXTERN_EXTERNALIZE => {
					if (noGC(opcode)) return;
					if (!checkExtension(Extension.GC, opcode)) return;
					var nullable = popRefE(ValueTypes.ANYREF);
					var et = if(nullable, ValueTypes.EXTERNREF, ValueTypes.EXTERNREF_NONNULL);
					push(et);
				}
				I32_TRUNC_SAT_F32_S => checkSignature(Opcode.I32_TRUNC_SAT_F32_S.sig);
				I32_TRUNC_SAT_F32_U => checkSignature(Opcode.I32_TRUNC_SAT_F32_U.sig);
				I32_TRUNC_SAT_F64_S => checkSignature(Opcode.I32_TRUNC_SAT_F64_S.sig);
				I32_TRUNC_SAT_F64_U => checkSignature(Opcode.I32_TRUNC_SAT_F64_U.sig);
				I64_TRUNC_SAT_F32_S => checkSignature(Opcode.I64_TRUNC_SAT_F32_S.sig);
				I64_TRUNC_SAT_F32_U => checkSignature(Opcode.I64_TRUNC_SAT_F32_U.sig);
				I64_TRUNC_SAT_F64_S => checkSignature(Opcode.I64_TRUNC_SAT_F64_S.sig);
				I64_TRUNC_SAT_F64_U => checkSignature(Opcode.I64_TRUNC_SAT_F64_U.sig);
				MEMORY_INIT => {
					if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
					var dindex = parser.readDataIndex();
					var mindex = parser.readMemoryIndex();
					checkAndPopArgs(SigCache.arr_iii);
				}
				DATA_DROP => {
					if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
					var index = parser.readDataIndex();
				}
				MEMORY_COPY => {
					var dest = parser.readMemoryIndex();
					var src = parser.readMemoryIndex();
					checkAndPopArgs(SigCache.arr_iii);
				}
				MEMORY_FILL => {
					var index = parser.readMemoryIndex();
					checkAndPopArgs(SigCache.arr_iii);
				}
				TABLE_INIT => {
					var elem = parser.readElemRef();
					var dst = parser.readTableRef();
					if (dst == null || elem == null) return;
					if (!ValueTypes.isAssignable(elem.elemtype, dst.elemtype)) {
						err_atpc().ElementTypeMismatch(dst.elemtype, elem.elemtype);
					}
					checkAndPopArgs(SigCache.arr_iii);
				}
				ELEM_DROP => {
					var index = parser.readElemRef();
				}
				TABLE_COPY => {
					var dst = parser.readTableRef();
					var src = parser.readTableRef();
					if (dst == null || src == null) return;
					if (!ValueTypes.isAssignable(src.elemtype, dst.elemtype)) {
						err_atpc().ElementTypeMismatch(dst.elemtype, src.elemtype);
					}
					checkAndPopArgs(SigCache.arr_iii);
				}
				TABLE_GROW => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(ValueType.I32);
					popE(table.elemtype);
					push(ValueType.I32);
				}
				TABLE_SIZE => {
					var table = parser.readTableRef();
					push(ValueType.I32);
				}
				TABLE_FILL => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(ValueType.I32);
					popE(table.elemtype);
					popE(ValueType.I32);
				}
				V128_LOAD_8_SPLAT => checkLoad(opcode, 0, ValueType.V128);
				V128_LOAD_16_SPLAT => checkLoad(opcode, 1, ValueType.V128);
				V128_LOAD_32_SPLAT => checkLoad(opcode, 2, ValueType.V128);
				V128_LOAD_64_SPLAT,
				V128_LOAD_8X8_S,
				V128_LOAD_8X8_U,
				V128_LOAD_16X4_S,
				V128_LOAD_16X4_U,
				V128_LOAD_32_ZERO,
				V128_LOAD_32X2_S,
				V128_LOAD_32X2_U,
				V128_LOAD_64_ZERO => checkLoad(opcode, 3, ValueType.V128);
				V128_LOAD		=> checkLoad(opcode, 4, ValueType.V128);
				V128_STORE		=> checkStore(opcode, 4, ValueType.V128);
				V128_LOAD_8_LANE	=> { checkLaneLoad(opcode, 0); checkLane(15); }
				V128_STORE_8_LANE	=> { checkLaneStore(opcode, 0); checkLane(15); }
				V128_LOAD_16_LANE	=> { checkLaneLoad(opcode, 1); checkLane(7); }
				V128_STORE_16_LANE	=> { checkLaneStore(opcode, 1); checkLane(7); }
				V128_LOAD_32_LANE	=> { checkLaneLoad(opcode, 2); checkLane(3); }
				V128_STORE_32_LANE	=> { checkLaneStore(opcode, 2); checkLane(3); }
				V128_LOAD_64_LANE	=> { checkLaneLoad(opcode, 3);  checkLane(1); }
				V128_STORE_64_LANE	=> { checkLaneStore(opcode, 3);  checkLane(1); }
				V128_CONST => {
					codeptr.skipN(16);
					push(ValueType.V128);
				}
				I8X16_SHUFFLE => codeptr.skipN(16);
				I8X16_EXTRACTLANE_S,
				I8X16_EXTRACTLANE_U,
				I8X16_REPLACELANE => checkLane(15);
				I16X8_EXTRACTLANE_S,
				I16X8_EXTRACTLANE_U,
				I16X8_REPLACELANE => checkLane(7);
				I32X4_EXTRACTLANE,
				I32X4_REPLACELANE,
				F32X4_EXTRACTLANE,
				F32X4_REPLACELANE => checkLane(3);
				I64X2_EXTRACTLANE,
				I64X2_REPLACELANE,
				F64X2_EXTRACTLANE,
				F64X2_REPLACELANE => checkLane(3);
				INVALID => {
					codeptr.at(opcode_pos);
					err_atpc().InvalidOpcode(codeptr.read1(), codeptr.read_uleb32());
				}
				_ => {
					if (opcode.sig != null) {
						checkSignature(opcode.sig);
						if (Trace.validation) traceStack(false);
					} else {
						codeptr.at(opcode_pos);
						err_atpc().InvalidOpcode(codeptr.read1(), codeptr.read_uleb32());
					}
				}
			}
			if (Trace.validation) traceStack(false);
		}
	}
	def startExHandler() -> (int, int) {
		if (ctl_top.try_end < 0) ctl_top.try_end = opcode_pos;
		return (ctl_top.start_pos + 1 - func_start_pos, ctl_top.try_end - func_start_pos);
	}
	def findExSlot(target: ControlEntry) -> (int, bool) {
		var ex_slot = -1, found = false;
		for (i < ctl_stack.top) { // XXX: linear search for exception slot
			var ctl = ctl_stack.elems[i];
			if (ctl.start_opcode == Opcode.CATCH.code || ctl.start_opcode == Opcode.CATCH_ALL.code) ex_slot++;
			if (ctl == target) {
				found = true;
				break;
			}
		}
		var ex_slots = ex_slot + 1;
		if (ex_slots > func.num_ex_slots) func.num_ex_slots = u16.!(ex_slots);
		return (ex_slot, found);
	}
	def noGC(opcode: Opcode) -> bool {
		return !checkExtension(Extension.GC, opcode);
	}
	def checkInit(index: u32) {
		if (index >= init_status.length) return;
		var i = int.!(index);
		if (init_status[i] == InitStatus.UNINIT) err_atpc().UninitializedLocal(index);
	}
	def setInit(index: u32) {
		if (index >= init_status.length) return;
		var i = int.!(index);
		if (init_status[i] == InitStatus.UNINIT) {
			init_status[i] = InitStatus.INIT;
			ctl_top.undo_init_list = List.new(i, ctl_top.undo_init_list);
		}
	}
	def resetInit() {
		for (l = ctl_top.undo_init_list; l != null; l = l.tail) init_status[l.head] = InitStatus.UNINIT;
		ctl_top.undo_init_list = null;
	}
	def checkSignature(sig: SigDecl) {
		var p = sig.params, r = sig.results;
		if (p.length > 0) checkAndPopArgs(p);
		if (r.length > 0) pushTypes(r);
	}
	def checkExtension(ext: Extension, opcode: Opcode) -> bool {
		if (extensions != (extensions | ext)) {
			err_atpc().OpcodeRequiresExtension(opcode, ext);
			return false;
		}
		return true;
	}
	def setUnreachable() {
		if (ctl_top == null) return;
		ctl_top.reachable = false;
		val_stack.top = ctl_top.val_stack_top;
	}
	def checkLoad(opcode: Opcode, max_align: u32, result: ValueType) {
		var indexType = checkAlignAndGetIndexType(max_align);
		popE(indexType);
		push(result);
	}
	def checkStore(opcode: Opcode, max_align: u32, val: ValueType) {
		var indexType = checkAlignAndGetIndexType(max_align);
		popE(val);
		popE(indexType);
	}
	def checkLaneLoad(opcode: Opcode, max_align: u32) {
		var indexType = checkAlignAndGetIndexType(max_align);
		popE(ValueType.V128);
		popE(indexType);
		push(ValueType.V128);
	}
	def checkLaneStore(opcode: Opcode, max_align: u32) {
		var indexType = checkAlignAndGetIndexType(max_align);
		popE(ValueType.V128);
		popE(indexType);
	}
	def checkAlignAndGetIndexType(max_align: u32) -> ValueType {
		var memarg = parser.readMemoryArg();
		var align = memarg.flags;
		if (align > max_align) err_atpc().IllegalAlignment(max_align, align);
		var indexType: ValueType = ValueType.I32;
		if (memarg.memory_index < module.memories.length) {
			indexType = module.memories[memarg.memory_index].indexType;
		}
		return indexType;
	}
	def checkLane(max: u32) {
		var lane = codeptr.read1();
		if (lane > max) err_atpc().IllegalLane(max, lane);
	}
	def traceOpcode() {
		OUT.put2("  %x(+%d): ", opcode_pos, opcode_pos - ctlxfer.start_pos);
		var prev = codeptr.pos;
		codeptr.at(opcode_pos);
		instrTracer.putInstr(OUT, module, codeptr);
		codeptr.at(prev);
		OUT.outln();
	}
	def checkTargetArgs(target: ControlEntry) {
		var p = labelArgs(target);
		if (p == null || p.length == 0) return;
		var onStack = val_stack.top - ctl_top.val_stack_top;
		var start = val_stack.top - p.length, missing = p.length - onStack;
		if (missing < 0) missing = 0;
		for (i = p.length - 1; i >= missing; i--) {
			var expected = p[i];
			var t = val_stack.elems[start + i];
			if (!ValueTypes.isAssignable(t, expected)) err_atpc().ExpectedType(expected, t);
		}
		if (missing > 0) {
			if (ctl_top.reachable) return err_atpc().EmptyValueStackExpecting(p[missing - 1]);
		}
	}
	def checkAndPopArgs(p: Array<ValueType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
	}
	def checkAndPopFields(p: Array<StorageType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i].valtype);
	}
	def checkArgsAndTransfer() {
		var p = ctl_top.results;
		var count = val_stack.top - ctl_top.val_stack_top;
		if (count > p.length || (ctl_top.reachable && count < p.length)) {
			err_atpc().ArityMismatchAtFallthru(p.length, count);
		}
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
		val_stack.top = ctl_top.val_stack_top;
		val_stack.pusha(p);
	}

	def push(v: ValueType) {
		val_stack.push(v);
	}
	def popE(expected: ValueType) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) {
				err_atpc().EmptyValueStackExpecting(expected);
			}
			return; // unreachable or already signalled an error
		}
		var t = val_stack.pop();
		if (!ValueTypes.isAssignable(t, expected)) {
			err_atpc().ExpectedType(expected, t);
		}
	}
	def checkReturnSig(results: Array<ValueType>) {
		var expected = sig.results;
		if (results.length != expected.length) {
			err_atpc().ReturnArityMismatch(expected.length, results.length);
			return;
		}
		for (i < results.length) {
			var t = results[i], e = expected[i];
			if (!ValueTypes.isAssignable(t, e)) {
				err_atpc().ReturnSigMismatch(i, e, t);
			}
		}
	}
	def popAny() -> (ValueType, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (ValueType.BOTTOM, false);
		}
		return (val_stack.pop(), true);
	}
	def popAnyFunc() -> (SigDecl, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (null, false);
		}
		var t = val_stack.pop();
		match (t) {
			Ref(nullable, heap) => match (heap) {
				Func(sig) => return (sig, true);
				_ => ;
			}
			_ => ;
		}
		err_atpc().ExpectedFunctionTypeT(t);
		return (null, false);
	}
	def popRef() -> (ValueType, bool) {
		var t = popAny();
		if (t.1 && !ValueTypes.isRef(t.0)) err_atpc().ExpectedRefType(t.0);
		return t;
	}
	def popRefE(expected: ValueType) -> bool {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) {
				err_atpc().EmptyValueStackExpecting(expected);
			}
			return true; // unreachable or already signalled an error
		}
		var t = val_stack.pop();
		if (!ValueTypes.isAssignable(t, expected)) {
			err_atpc().ExpectedType(expected, t);
		}
		match (t) {
			Ref(nullable, ht) => return nullable;
			_ => return true;
		}
	}
	def asNonNullRefType(t: ValueType) -> ValueType {
		match (t) {
			Ref(nullable, heap) => return ValueType.Ref(false, heap);
			_ => err_atpc().ExpectedRefType(t);
		}
		return t;
	}
	def pushTypes(r: Array<ValueType>) {
		val_stack.pusha(r);
	}
	def checkArgsAndPushControl(opcode: Opcode, params: Array<ValueType>, results: Array<ValueType>) -> ControlEntry {
		checkAndPopArgs(params);
		pushTypes(params);
		return pushControl(opcode.code, params, results, val_stack.top - params.length);
	}
	def pushControl(opcode: byte, params: Array<ValueType>, results: Array<ValueType>, val_stack_top: int) -> ControlEntry {
		var ctl = ctl_stack.next();
		if (ctl != null) { // FAST: reuse previous ControlEntry object
			ctl_stack.top++;
		} else { // allocate and cache new ControlEntry object
			ctl = ControlEntry.new();
			ctl_stack.push(ctl);
		}
		ctl_top = ctl;
		ctl.start_pos = opcode_pos;
		ctl.delegate_pos = opcode_pos;
		ctl.start_opcode = opcode;
		ctl.sidetable_pos = -1;
		ctl.params = params;
		ctl.results = results;
		ctl.val_stack_top = val_stack_top;
		ctl.reachable = true;
		ctl.first_ref = -1;
		ctl.else_ref = -1;
		ctl.undo_init_list = null;
		return ctl;
	}
	def getControl(depth: u32) -> ControlEntry {
		if (depth >= ctl_stack.top) {
			err_atpc().OobLabel(depth, ctl_stack.top);
			return null;
		}
		var result = ctl_stack.elems[ctl_stack.top - int.!(depth) - 1];
		if (Trace.validation) {
			OUT.put2("    label: depth=%d @+%d", depth, result.start_pos - ctlxfer.start_pos).outln();
		}
		return result;
	}
	def getLocalType(index: u32) -> ValueType {
		if (index < locals.length) return locals[int.view(index)];
		err_atpc().OobLocalIndex(index, locals.length);
		return ValueType.BOTTOM;
	}
	def traceStack(before: bool) {
		if (before) OUT.put1("    stack: %d| ", val_stack.top);
		else        OUT.put1("       ==> %d| ", val_stack.top);

		var start = val_stack.top - 5;
		if (start > 0) OUT.puts("... ");
		else start = 0;
		for (i = start; i < val_stack.top; i++) {
			var e = val_stack.elems[i];
			e.render(OUT);
			OUT.putc(' ');
		}
		OUT.outln();
	}
}
def labelArgs(target: ControlEntry) -> Array<ValueType> {
	if (target.start_opcode == Opcode.LOOP.code) return target.params;
	else return target.results;
}
type CodeValidatorResult {
	case Ok {}
	case Error(error: WasmError, pc: int, msg: string) { }
}
private enum InitStatus {
	UNINIT,
	INIT
}
// An entry in the control stack, exposed guts.
class ControlEntry {
	var start_pos: int;
	var delegate_pos: int;
	var start_opcode: byte;
	var sidetable_pos: int;
	var params: Array<ValueType>;
	var results: Array<ValueType>;
	var reachable = true;
	var val_stack_top: int;
	var try_end: int;
	var first_ref: int = -1;
	var else_ref: int = -1;
	var undo_init_list: List<int>;
}
// Utility for building the sidetable for a function, which contains control transfer information.
class SidetableBuilder {
	def sidetable = Vector<i32>.new();
	var start_pos: int;
	def reset(start_pos: int) {
		this.start_pos = start_pos;
		this.sidetable.resize(0);
	}
	// Emit a control entry that references {target} from the pc position {pc}.
	def ref0(target: ControlEntry, pos: int) {
		refV(target, pos, 0, 0);
	}
	// Emit a control entry for an else that references the else label of {target} from {pos}.
	def refElse(target: ControlEntry, pos: int) {
		var pc = rel(pos);
		var stp = sidetable.length;
		if (Trace.validation) {
			OUT.put3("    refElse(@+%d (stp=%d) to +%d.else", pc, stp, rel(target.start_pos));
			OUT.outln();
		}
		target.else_ref = stp;
		sidetable.put(pc).put(0).put(0).put(-1);
	}
	// Bind the else label for {target} at {pos}, resolving references to it.
	def bindElse(target: ControlEntry, pos: int) {
		bind0(target, target.else_ref, pos, sidetable.length);
		target.else_ref = -1;
	}
	// Emit a sidetable entry for a branch to {target} from {pos} with stack top {val_stack_top}.
	def refS(target: ControlEntry, pos: int, val_stack_top: int) {
		var valcount = labelArgs(target).length;
		var popcount = val_stack_top - valcount - target.val_stack_top;
		refV(target, pos, valcount, u23.view(popcount));
	}
	def refV(target: ControlEntry, pos: int, valcount: int, popcount: int) {
		var pc = rel(pos);
		var stp = sidetable.length;
		if (Trace.validation) {
			OUT.put3("    refV(@+%d (stp=%d) to +%d.label, ", pc, stp, rel(target.start_pos));
			OUT.put2("valcount=%d, popcount=%d)",	valcount, popcount);
			OUT.outln();
		}
		sidetable.put(pc).put(valcount).put(popcount).put(target.first_ref);
		target.first_ref = stp;
	}
	// Bind the label for {target} at {pos} and {sidetable_pos} and resolve references to it.
	def bind(target: ControlEntry, pos: int, sidetable_pos: int) {
		bind0(target, target.first_ref, pos, sidetable_pos);
		target.first_ref = -1;
	}
	def bind0(target: ControlEntry, stp: int, pos: int, sidetable_pos: int) {
		target.sidetable_pos = sidetable_pos;
		var pc = rel(pos);
		while (stp >= 0) {
			var ni = sidetable[stp + 3];
			if (Trace.validation) OUT.put2("    resolve(stp=%d, next=%d)", stp, ni).outln();
			var pos = sidetable[stp];
			var pc_delta = pc - pos;
			sidetable[stp] = pc_delta;
			sidetable[stp + 3] = sidetable_pos - stp;

			if (Trace.validation) {
				OUT.put3("    resolve(@+%d to +%d) (\xCE\x94stp=%d)", pos, pc, sidetable_pos - stp);
				OUT.outln();
			}
			stp = ni;
		}
	}
	def rethrow(ex_slot: int, popcount: int) {
		if (Trace.validation) OUT.put2("    rethrow ex_slot=%d popcount=%d", ex_slot, popcount).outln();
		sidetable.put(ex_slot).put(0).put(popcount).put(0); // XXX: only need 1 entry for rethrow
	}
	def rel(pos: int) -> int {
		return pos - start_pos;
	}
	def extract() -> Array<int> {
		return if(sidetable.length > 0, sidetable.extract(), NO_SIDETABLE);
	}
}
def NO_SIDETABLE = Array<int>.new(0);

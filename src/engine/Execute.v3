// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The {Execute} component provides an all-purpose facade to the rest of the engine and runtime
// that deals with execution, modes, and stack traces. It separates the runtime from specifics
// of the target, which may have one or more execution tiers.
component Execute {
	def probes = ProbeList.new();		// probes on the global interpreter loop
	var limits = Limits.new();		// limits on execution/memory
	var exit_code: int;
	var handleTrap = defaultTrap;		// how to handle traps
	var tiering: ExecutionStrategy;
	def trapObjects = Array<Trap>.new(TrapReason.count);
	def NO_FRAMES = Array<(WasmFunction, int)>.new(0);

	new() {
		for (r in TrapReason) trapObjects[r.tag] = Trap.new(r, null, null);
	}

	// Reset internal states.
	def reset() {
		probes.clear();
		tiering.reset();
		if (Trace.interpreter) probes.add(TraceProbe.new());
	}
	// Call a given function with the given arguments.
	def call(func: Function, args: Array<Value>) -> Result {
		return tiering.call(func, args);
	}
	private def doInvokeHostFunction(hf: HostFunction, args: Array<Value>) -> HostResult {
		if (Trace.interpreter) traceCallHostFunction(hf);
		var result: HostResult;
		match (hf) {
			hf0: HostFunction0 => {
				if (args.length != 0) return funcSigMismatch();
				result = hf0.invoke0();
			}
			hf1: HostFunction1 => {
				if (args.length != 1) return funcSigMismatch();
				result = hf1.invoke1(args[0]);
			}
			hf2: HostFunction2 => {
				if (args.length != 2) return funcSigMismatch();
				result = hf2.invoke2(args[0], args[1]);
			}
			hf3: HostFunction3 => {
				if (args.length != 3) return funcSigMismatch();
				result = hf3.invoke3(args[0], args[1], args[2]);
			}
			hfN: HostFunctionN => {
				if (args.length != hf.sig.params.length) return funcSigMismatch();
				result = hfN.invokeN(args);
			}
		}
		return result;
	}
	def funcSigMismatch() -> HostResult.Throw {
		return HostResult.Throw(Trap.new(TrapReason.FUNC_SIG_MISMATCH, null, null));
	}
	def trap(reason: TrapReason, hf: HostFunction) -> Result.Throw {
		var segment = if(hf != null, StackSegment.new(null, hf, NO_FRAMES));
		return Result.Throw(Trap.new(reason, null, segment));
	}

	// Traces calls to host functions.
	def traceCallHostFunction(hf: HostFunction) {
//TODO		var c = getCallStack();
//TODO		for (i < c.top) Trace.OUT.sp();
		Trace.OUT.put2("callHost(\"%q\": %q)", hf.render, hf.sig.render).outln();
	}
	// Fires probes on the global interpreter loop
	def fireProbes(dynamicLoc: DynamicLoc) -> Throwable {
		var r = Execute.probes.fire(dynamicLoc);
		return resume(r);
	}
	// Fires probes on a specific instruction
	def fireProbesAt(dynamicLoc: DynamicLoc) -> Throwable {
		var func = dynamicLoc.func;
		var pc = dynamicLoc.pc;
		var probes = func.instance.module.probes;
		if (probes == null) return null;
		var map = probes[func.decl.func_index];
		if (map == null) return null;
		var list = map[pc];
		if (list == null) return null;
		var r = list.fire(dynamicLoc);
		if (list.elem == null) map[pc] = null;
		return resume(r);
	}
	def resume(r: Resumption) -> Throwable {
		match (r) {
			Continue => {
				return null;
			}
			Trap(reason, trace) => { // TODO: add exception backtrace
				return Trap.new(reason, null, null);
			}
		}
	}

	def fwBoundCall(f: Function, args1: Array<Value>, args2: Array<Value>) -> HostResult {
		var al = args1.length, args = Array<Value>.new(al + args2.length);
		for (i < al) args[i] = args1[i];
		for (i < args2.length) args[i + al] = args2[i];
		return HostResult.TailCall(f, args);
	}
	def matchRtt(obj: Object, rtt: HeapTypeDecl) -> bool {
		match (obj) {
			x: HeapObject => return ValueTypes.isAssignableHeap(x.decl, rtt);
			x: WasmFunction => return ValueTypes.isAssignableHeap(x.sig, rtt);
		}
		return false;
	}
	def doCast(instance: Instance, nullable: bool, htcode: int, val: Value) -> bool {
		match (htcode) {
			BpHeapTypeCode.FUNC.val => return checkRef(nullable, Function.?, val);
			BpHeapTypeCode.EXTERN.val => return checkI31OrRef(nullable, Object.?, val);
			BpHeapTypeCode.ARRAY.val => return checkRef(nullable, HeapArray.?, val);
			BpHeapTypeCode.STRUCT.val => return checkRef(nullable, HeapStruct.?, val);
			BpHeapTypeCode.ANY.val => return checkI31OrRef(nullable, Object.?, val);
			BpHeapTypeCode.EQ.val => return checkI31OrRef(nullable, HeapObject.?, val);
			BpHeapTypeCode.I31.val => return checkI31OrRef(nullable, isFalse, val);
			BpHeapTypeCode.NOFUNC.val, // fallthru
			BpHeapTypeCode.NOEXTERN.val, // falltrhu
			BpHeapTypeCode.NONE.val => return checkRef(nullable, isFalse, val);
			_ => {
				if (!Value.Ref.?(val)) return false;
				var obj = Value.Ref.!(val).val;
				if (obj == null) return nullable;
				var index = u32.!(htcode); // XXX: make this a runtime error?
				var rtt = instance.heaptypes[index];
				return matchRtt(obj, rtt);
			}
		}
	}
	private def isFalse(obj: Object) -> bool {
		return false;
	}
	private def checkI31OrRef(nullable: bool, checkRef: Object -> bool, val: Value) -> bool {
		match (val) {
			I31 => return true;
			Ref(obj) => {
				if (obj == null) return nullable;
				return checkRef(obj);
			}
			_ => return false;
		}
	}
	private def checkRef(nullable: bool, q: Object -> bool, val: Value) -> bool {
		if (!Value.Ref.?(val)) return false;
		var obj = Value.Ref.!(val).val;
		if (obj == null) return nullable;
		return q(obj);
	}

	def bytesToVals(storage: StorageType, data: Array<byte>, offset: u32, length: u32) -> (bool, Array<Value>) {
		var vals = Array<Value>.new(int.!(length));
		if (offset >= data.length) return (false, null);
		var limit = sizeOfStorage(storage) * length + offset;
		if (limit > data.length) return (false, null);
		var d = DataReader.new(data).reset(data, int.!(offset), int.!(limit));
		match (storage.packing) {
			UNPACKED => {
				match (storage.valtype) {
					I32 => for (i < vals.length) vals[i] = Value.I32(d.read_u32());
					I64 => for (i < vals.length) vals[i] = Value.I64(d.read_u64());
					F32 => for (i < vals.length) vals[i] = Value.F32(d.read_u32());
					F64 => for (i < vals.length) vals[i] = Value.F64(d.read_u64());
					V128 => for (i < vals.length) vals[i] = Value.V128(d.read_u64(), d.read_u64());
					_ => ;
				}
			}
			PACKED_I8 => for (i < vals.length) vals[i] = Value.I32(d.read1());
			PACKED_I16 => for (i < vals.length) vals[i] = Value.I32(d.read1() | (u32.!(d.read1()) << 8));
		}
		return (d.ok, vals);
	}
	def sizeOfStorage(storage: StorageType) -> u32 {
		match (storage.packing) {
			UNPACKED => {
				match (storage.valtype) {
					I32, F32 => return 4;
					I64, F64 => return 8;
					V128 => return 16;
					_ => return 8;
				}
			}
			PACKED_I8 => return 1;
			PACKED_I16 => return 2;
		}
	}
	def copyElemsInto(dest: Array<Value>, instance: Instance, dst_offset: u32, elem: ElemDecl, src_offset: u32, size: u32) -> bool {
		if (elem == null) {
			if (ArrayUtil.boundsCheck(dest, dst_offset, 0, size) < 0) return false;
			if (ArrayUtil.boundsCheck<byte>(null, src_offset, 0, size) < 0) return false;
			return true;
		}
		match (elem.details) {
			FuncRefs(vals) => {
				return ArrayUtil.safeCopyF(dest, dst_offset, vals, src_offset, size, instance.getFunctionAsVal);
			}
			Exprs(vals) => {
				return ArrayUtil.safeCopyF(dest, dst_offset, vals, src_offset, size, instance.evalInitExpr);
			}
		}
	}
}

type Result {
	case Value(vals: Array<Value>) {}
	case Throw(thrown: Throwable) {}
	def equals(that: Result) -> bool {
		if (this == that) return true;
		if (Result.Value.?(this) && Result.Value.?(that)) {
			var a = Result.Value.!(this).vals;
			var b = Result.Value.!(that).vals;
			if (a == b) return true;
			if (a == null) return false;
			if (b == null) return false;
			if (a.length != b.length) return false;
			for (i < a.length) if (a[i] != b[i]) return false;
			return true;
		}
		if (Result.Throw.?(this) && Result.Throw.?(that)) {
			var a = Result.Throw.!(this).thrown;
			var b = Result.Throw.!(that).thrown;
			if (a == b) return true;
			if (Trap.?(a) && Trap.?(b)) {
				return Trap.!(a).reason == Trap.!(b).reason;
			}
			if (Exception.?(a) && Exception.?(b)) {
				var xa = Exception.!(a);
				var xb = Exception.!(b);
				if (xa.tag.decl != xb.tag.decl) return false;
				return Arrays.equal(xa.vals, xb.vals);
			}
		}
		return false;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Value(vals) => {
				if (vals == null) {
					buf.puts("<null>");
				} else if (vals.length == 1) {
					vals[0].render(buf);
				} else {
					Values.renderVals(buf, vals);
				}
			}
			Throw(thrown) => thrown.render(buf);
		}
		return buf;
	}
}

// The various ways user code can resume from a break, trap, or timeout
type Resumption {
	case Continue;
	case Trap(reason: TrapReason, trace: bool);
}

def defaultBreak() -> Resumption {
	return Resumption.Continue;
}
def defaultTrap(reason: TrapReason) -> Resumption {
	return Resumption.Trap(reason, false);
}

// The execution strategy controls how the engine executes Wasm bytecode, e.g. whether
// an interpreter or compiler(s) are used, and at what points. It interposes at a number
// of important events in the lifecycle of Wasm modules and instances and may or may not
// perform synchronous or asynchronous work.
class ExecutionStrategy {
	// Called upon selection of this strategy (e.g. by command-line flag).
	def onActivate() { }

	// Called during execution startup and exit.
	def onEngineStart() { }
	def onEngineExit(code: int) { }

	// Called if monitors are activated for the program.
	def onMonitorsStart() { }
	def onMonitorsFinish(module: Module, err: ErrorGen) { }

	// Called during binary decoding of a module and relevant sections.
	// Note that code validation has not yet been performed.
	// Example usage: pre-allocate code space and start compiler threads.
	def onModuleStart(module: Module, size: u32) { }			// note: size == 0 if estimate only
	def onCodeSectionStart(module: Module, num_funcs: u32, size: u32) { }
	def onFuncBody(module: Module, func_index: u32, body: Range<byte>, err: ErrorGen) { }
	def onCodeSectionFinish(module: Module, num_funcs: u32, size: u32, err: ErrorGen) { }
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) { }		// note: size is exact

	// Called when a function has its code validated.
	// Example usage: do synchronous (AOT) one-off compile.
	def onFuncValidationStart(module: Module, func: FuncDecl) { }
	def onFuncValidationFinish(module: Module, func: FuncDecl, err: ErrorGen) { }

	// Called when a module is instantiated.
	// Example usage: generate code specialized to import bindings.
	def onInstantiateStart(instantiator: Instantiator) { }
	def onInstantiateFinish(instantiator: Instantiator, err: ErrorGen) { }

	// Called before a test run of a function. (For testing only).
	def onTestRun(wf: WasmFunction, err: ErrorGen) { }

	// Called if a new function is created in a module.
	def onNewFunction(wf: WasmFunction, err: ErrorGen) { }

	// Called if a function is detected as "hot" at a particular location (e.g. loop header)
	// that probably merits on-stack-replacement.
	def onTierUp(wf: WasmFunction, pc: int) -> TargetOsrInfo {
		var d: TargetOsrInfo;
		return d; // default: no OSR occurred
	}

	// Call a function with arguments and return a result.
	// Example implementation: call into the interpreter.
	def call(func: Function, args: Array<Value>) -> Result;

	// Reset all internal state of execution tiers.
	def reset() { }
}

// Deals with command-line options for selecting the mode, printing help, etc.
component ExecuteOptions {
	private var modes: List<(string, ExecutionStrategy, string)>;
	private var default: ExecutionStrategy;

	// Used internally to register different execution strategies.
	def registerMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {
		modes = List.new((name, tiering, help), modes);
		return tiering;
	}
	// Used internally to register different execution strategies.
	def registerDefaultMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {
		registerMode(name, tiering, help);
		Execute.tiering = default = tiering;
		return tiering;
	}
	// Set the mode from a command-line option.
	def setMode(name: Range<byte>) -> bool {
		for (l = modes; l != null; l = l.tail) {
			var t = l.head;
			if (ArrayUtil.equal(t.0, name)) {
				t.1.onActivate();
				Execute.tiering = t.1;
				return true;
			}
		}
		return false;
	}
	// Print help for the supported modes.
	def printHelp() {
		var out = Trace.OUT, H = out.putsln;
		H("");
		H("This build of the Wizard Engine responds to the execution mode flag in the following ways.");
		H("");
		for (l = modes; l != null; l = l.tail) {
			var t = l.head;
			out.puts("    -mode=");
			out.puts(t.0);
			out.pad(' ', 32);
			if (t.1 == default) out.puts("(default) ");
			out.puts(t.2);
			out.outln();
		}

		H("");
	}
}
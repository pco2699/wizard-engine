// Copyright 2023 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global metrics collected by the engine.
component Metrics {
	private def us = "\xCE\xBCs";
	private def bytes = "bytes";
	private var all: List<Metric>;

	// Metrics from initialization/startup.
	def pregen_time_us	= m("pregen:time_us", us, "Time taken to create pregen asm stubs");
	def pregen_bytes	= m("pregen:bytes", bytes, "Total pregen asm stub bytes");

	// Metrics from binary parsing/loading.
	def load_time_us	= m("load:time_us", us, "Time taken to load and parse Wasm binary");
	def load_bytes		= m("load:bytes", bytes, "Total Wasm binary bytes loaded");
	def load_time_per_byte	= r("load:time_per_byte", load_time_us, load_bytes,
		"Ratio of load time per input byte");
	
	def validate_time_us	= m("validate:time_us", us, "Time taken to validate Wasm bytecode");
	def validate_bytes	= m("validate:bytes", bytes, "Total Wasm bytecode bytes validated");
	def validate_time_per_byte = r("validate:time_per_byte", validate_time_us, validate_bytes,
		"Ratio of validation time per input bytecode byte");

	// Metrics from the single-pass compiler.
	def spc_in_bytes	= m("spc:in_bytes", bytes, "Total bytecode bytes input to single-pass compiler");
	def spc_code_bytes	= m("spc:code_bytes", bytes, "Total machine code bytes output by single-pass compiler");
	def spc_data_bytes	= m("spc:data_bytes", bytes, "Total data/metadata bytes output by single-pass compiler");
	def spc_time_us		= m("spc:time_us", us, "Time taken by single-pass compiler");
	def spc_functions	= m("spc:functions", "functions",
		"Number of functions successfully compiled by single-pass compiler");
	def spc_time_per_byte	= r("spc:time_per_byte", spc_time_us, spc_in_bytes,
		"Ratio of compile time per input bytecode byte");

	// Keep the metrics in the above-declared order.
	private def unused__ = all = Lists.reverse(all);

	// Enable metrics matching the given pattern.
	def enable(glob: GlobMatcher) {
		for (l = all; l != null; l = l.tail) {
			if (glob.matches(l.head.name)) l.head.enable();
		}
	}
	// Report enabled metrics.
	def report() {
		for (l = all; l != null; l = l.tail) {
			var metric = l.head;
			if (metric.enabled) {
				Trace.OUT.puts(metric.name);
				Trace.OUT.pad(' ', 24);
				Trace.OUT.puts(" : ");
				metric.report(Trace.OUT);
				Trace.OUT.sp();
				Trace.OUT.pad(' ', 37);
				Trace.OUT.puts(metric.units);
				Trace.OUT.outln();
			}
		}
	}
	// Create a new metric and add it to the list.
	private def m(name: string, units: string, help: string) -> Metric {
		var r = Metric.new(name, units, help);
		all = List.new(r, all);
		return r;
	}
	// Create a new ratio metric and add it to the list.
	private def r(name: string, n: Metric, d: Metric, help: string) -> Metric {
		var r = RatioMetric.new(name, n, d, help);
		all = List.new(r, all);
		return r;
	}
}

// Parses and enables collection/reporting of metrics based on arguments.
component MetricOptions {
	// Parse command-line argument and update metric collection. Return {true} if the
	// argument was matched as a trace flag.
	def parse(arg: string) -> bool {
		var prefix = "--metrics=";
		if (!Strings.startsWith(arg, prefix)) return false;
		var pat = Arrays.range(arg, prefix.length, arg.length);
		var glob = GlobMatcher.new(pat);
		Metrics.enable(glob);
		return true;
	}
	// TODO: help
}

// Internal representation of a metric.
class Metric(name: string, units: string, help: string) {
	var enabled: bool;
	var val: u64;

	def enable() {
		this.enabled = true;
	}
	def report(out: StringBuilder) -> StringBuilder {
		return out.putd(val);
	}
}

// A metric which is the ratio of two other metrics.
class RatioMetric extends Metric {
	def n: Metric;
	def d: Metric;
	
	new(name: string, n, d, help: string)
		super(name, Strings.format2("%s/%s", n.units, d.units), help) {
	}

	def enable() {
		this.enabled = true;
		n.enable();
		d.enable();
	}
	def report(out: StringBuilder) -> StringBuilder {
		var ratio = double.!(n.val) / double.!(d.val);
		var i = long.truncd(ratio);
		out.putd(i);
		out.putc('.');
		for (j < 6) {
			ratio = ratio - double.!(i);
			ratio *= 10d;
			i = long.truncd(ratio);
			out.putd(i);
		}
		return out;
	}
}

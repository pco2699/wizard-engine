// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of a Wasm module, including its various index spaces of declarations.
// Keeps the original order of declarations in order to perform polymorphic
// import binding.
class Module(filename: string) {
	var name: string;		// can be manually set
	def decls = Vector<Decl2>.new();
	def imports = Vector<Decl>.new(); // all imports

	def heaptypes = Vector<HeapTypeDecl>.new();
	def abstypes = Vector<AbsTypeDecl>.new();	// ABS type extension
	def functions = Vector<FuncDecl>.new();
	def tables = Vector<TableDecl>.new();
	def memories = Vector<MemoryDecl>.new();
	def globals = Vector<GlobalDecl>.new();
	def tags = Vector<TagDecl>.new();		// exception-handling extension
	def exports = Vector<(string, Decl)>.new();
	def elems = Vector<ElemDecl>.new();
	def data = Vector<DataDecl>.new();
	def custom_sections = Vector<CustomSection>.new();
	var probes: Array<Array<ProbeList>>;

	var start_function = -1;
	var explicit_data_count = -1;
	var target_module: TargetModule;

	var names: NameSection;

	// Add a new declaration to this module. Automatically manages the various
	// index spaces and updates any space-specific indexes.
	def addDecl(d: Decl) {
		match (d) {
			x: SigDecl => {
				var index = heaptypes.length;
				decls.put(Decl2.Sig(x.heaptype_index = index));
				heaptypes.put(x);
			}
			x: StructDecl => {
				var index = heaptypes.length;
				decls.put(Decl2.Struct(x.heaptype_index = index));
				heaptypes.put(x);
			}
			x: ArrayDecl => {
				var index = heaptypes.length;
				decls.put(Decl2.Array(x.heaptype_index = index));
				heaptypes.put(x);
			}
			x: AbsTypeDecl => {
				var index = abstypes.length;
				decls.put(Decl2.AbsType(x.abstype_index = index));
				abstypes.put(x);
			}
			x: FuncDecl => {
				var index = functions.length;
				decls.put(Decl2.Func(x.func_index = index, x.sig_index));
				functions.put(x);
				if (u32.view(x.sig_index) < heaptypes.length) {
					var d = heaptypes[x.sig_index];
					if (SigDecl.?(d)) x.sig = SigDecl.!(d);
				}
			}
			x: TableDecl => {
				var index = tables.length;
				decls.put(Decl2.Table(x.table_index = index));
				tables.put(x);
			}
			x: MemoryDecl => {
				var index = memories.length;
				decls.put(Decl2.Memory(x.memory_index = index));
				memories.put(x);
			}
			x: GlobalDecl => {
				var index = globals.length;
				decls.put(Decl2.Global(x.global_index = index));
				globals.put(x);
			}
			x: TagDecl => {
				var index = tags.length;
				decls.put(Decl2.Tag(x.tag_index = index));
				tags.put(x);
				if (u32.view(x.sig_index) < heaptypes.length) {
					var d = heaptypes[x.sig_index];
					if (SigDecl.?(d)) x.fields = SigDecl.!(d).params;
				}
			}
			x: ImportCommandDecl => {
				var index = imports.length;
				decls.put(Decl2.ImportCommand(index));
			}
		}
	}
	// Add a new import declaration to this module. Adds this declaration to {imports} as well.
	def addImport(module_name: string, field_name: string, args: Array<Decl>, d: Decl) {
		if (d == null) return;
		if (args == null) args = Modules.NO_IMPORT_ARGS;
		d.imp = ImportInfo.new(module_name, field_name, imports.length, args);
		addDecl(d);
		imports.put(d);
	}
	// Returns {true} if this module contains any abstract type imports.
	def isAbstract() -> bool {
		return abstypes.length > 0;
	}
	// Get the reference type at the given index.
	def getRefType(nullable: bool, type_index: int) -> ValueType {
		return ValueTypes.Ref(nullable, heaptypes[type_index]); // XXX: inline?
	}
	// Insert a probe a specific offset in a specific function.
	def insertProbeAt(func_id: int, offset: int, p: Probe) {
		if (probes == null) probes = Array.new(functions.length);
		var map = probes[func_id];
		if (map == null) map = probes[func_id] = Array.new(functions[func_id].orig_bytecode.length);
		var list = map[offset];
		if (list == null) map[offset] = list = ProbeList.new();
		list.add(p);
		functions[func_id].probeAt(offset);
	}
	// Insert a probe a specific offset in a specific function.
	def removeProbeAt(func_id: int, offset: int, p: Probe) {
		if (probes == null) return;
		var map = probes[func_id];
		if (map == null) return;
		var list = map[offset];
		if (list == null) return;
		list.remove(p);
		if (list.elem == null) functions[func_id].unprobeAt(offset);
	}
	// Insert a probe that is fired when a function is called
	def insertProbeAtFuncEnter(func_id: int, p: Probe) {
		FuncMonitorUtil.probeOnEnterExitFunc(this, this.functions[func_id], p, null);
	}
	// Insert a probe that is fired when a function is exited
	def insertProbeAtFuncExit(func_id: int, p: Probe) {
		FuncMonitorUtil.probeOnEnterExitFunc(this, this.functions[func_id], null, p);
	}
	// Insert probes that are fired when a function is entered and exited
	def insertProbeAtFuncEnterExit(func_id: int, enterProbe: Probe, exitProbe: Probe) {
		FuncMonitorUtil.probeOnEnterExitFunc(this, this.functions[func_id], enterProbe, exitProbe);
	}
}

// For imported quantities, the module name, field name, index, and args.
class ImportInfo(module_name: string, field_name: string, import_index: int, args: Array<Decl>) {
}

// Superclass of all declared and importable/exportable declarations.
class Decl {
	var imp: ImportInfo;
	def imported() -> bool { return imp != null; }
}

// Abstract type declaration. (ext:type-imports)
class AbsTypeDecl(has_default: bool, is_externref: bool, assignable: Array<ValueType>) extends Decl {
	var abstype_index = -1;
	def isAssignableTo(t: ValueType) -> bool {
		if (is_externref && t == ValueTypes.EXTERNREF) return true;
		match (t) {
			Abstract(it) => if (this == it) return true;
			_ => ;
		}
		for (s in assignable) {
			if (ValueTypes.isAssignable(s, t)) return true;
		}
		return false;
	}
}

def NO_SIDETABLE = Array<int>.new(0);
// Function declaration, including signature and code.
class FuncDecl(sig_index: int) extends Decl {
	var sig: SigDecl;
	var func_index = -1;
	var abs_start: int;
	var reffed: bool;
	var num_locals: u16;
	def var cur_bytecode: Array<byte>;	// current (potentially instrumented) bytecode
	def var orig_bytecode: Array<byte>;	// unmodified original bytecode
	var sidetable = NO_SIDETABLE;	// sidetable, including control transfers
	var target_code: TargetCode;
	var tierup_trigger: int;

	def render(names: NameSection, buf: StringBuilder) -> StringBuilder {
		var name = if (names != null, names.getFuncName(func_index));
		if (name != null) return buf.putsq(name);
		else return buf.put1("#%d", func_index);
	}
	def setOrigCode(code: Array<byte>) -> this {
		cur_bytecode = orig_bytecode = code;
		var tc: TargetCode;
		target_code = tc; // reset target code as well
		sidetable = NO_SIDETABLE;
	}
	def probeAt(offset: int) -> this {
		// "orig" will become a copy of the original code, to allow in-place modification of old code
		if (cur_bytecode == orig_bytecode) orig_bytecode = Arrays.dup(orig_bytecode);
		cur_bytecode[offset] = InternalOpcode.PROBE.code;
	}
	def unprobeAt(offset: int) -> this {
		if (cur_bytecode == orig_bytecode) return;
		cur_bytecode[offset] = orig_bytecode[offset];
	}
	def reset() -> this {
		if (cur_bytecode == orig_bytecode) return;
		ArrayUtil.copyInto(cur_bytecode, 0, orig_bytecode, 0, orig_bytecode.length);
		orig_bytecode = cur_bytecode;
	}
	def dup(new_sig: SigDecl) -> FuncDecl {
		var n = FuncDecl.new(this.sig_index);
		n.sig = new_sig;
		n.func_index = this.func_index;
		n.abs_start = this.abs_start;
		n.reffed = this.reffed;
		n.cur_bytecode = this.cur_bytecode;
		n.orig_bytecode = this.orig_bytecode;
		n.sidetable = this.sidetable;
		n.num_locals = this.num_locals;
		n.target_code = this.target_code;
		return n;
	}
}

// Table declaration, including element type, limits.
class TableDecl(elemtype: ValueType, initial: u32, maximum: Max) extends Decl {
	var table_index = -1;
	var has_default_elem: bool;
	var default_elem: InitExpr;
}

// Memory declaration, including limits, shared attribute, and index type.
class MemoryDecl(initial: u64, maximum: Max, shared: bool, indexType: ValueType) extends Decl {
	var memory_index = -1;
}

// Global variable declaration, including type and mutability.
class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {
	var global_index = -1;
}

// Tag declaration. (ext:exception-handling)
class TagDecl(sig_index: int) extends Decl {
	var fields: Array<ValueType>;
	var tag_index = -1;
}

// Import command declaration. (ext:type-imports)
class ImportCommandDecl extends Decl {
}

// An element declaration that can occur in the elements section.
class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {
	var elem_index: int;
}
type ElemDetails {
	case FuncRefs(vals: Array<int>);
	case Exprs(vals: Array<InitExpr>); /* ext:reference-types */
	def length() -> int {
		match (this) {
			FuncRefs(vals) => return vals.length;
			Exprs(vals) => return vals.length;
		}
	}
}
type SegmentMode {
	case Passive;
	case Active(index: int, offset: InitExpr);
	case Declarative;
}

// A data segment declaration that can occur in the data section.
class DataDecl(mode: SegmentMode, data: Array<byte>) {
}

// An uninterpreted custom section.
class CustomSection(name: string, payload: Array<byte>) {
}

// A special kind of expression that can be used in initialization.
type InitExpr {
	case I32(val: i32);
	case I64(val: i64);
	case F32(val: u32);
	case F64(val: u64);
	case V128(low: u64, high: u64);
	case FuncRefNull;
	case ExternRefNull;
	case Global(global_index: int, decl: GlobalDecl);
	case FuncRef(func_index: int, decl: FuncDecl);
	case Const(val: Value);
	case I31(val: InitExpr);
	case Array(t: HeapType.Array, len: InitExpr, elem: InitExpr);
	case FixedArray(t: HeapType.Array, vals: Array<InitExpr>);
	case Struct(t: HeapType.Struct, vals: Array<InitExpr>);
}

// Optional maximum for a table or memory.
type Max {
	case None;
	case Set(max: u64);

	def min(that: u64) -> u64 {
		match (this) {
			None => return that;
			Set(max) => return if(max < that, max, that);
		}
	}
	def check(val: u64) -> bool {
		match (this) {
			None => return true;
			Set(max) => return val <= max;
		}
	}
}

// Globals associated with modules.
component Modules {
	def NO_IMPORT_ARGS: Array<Decl> = [];
}

type Decl2 {
	case Sig(index: int);
	case Struct(index: int);
	case Array(index: int);
	case AbsType(index: int);
	case Func(index: int, sig_index: int);
	case Table(index: int);
	case Memory(index: int);
	case Global(index: int);
	case Tag(index: int);
	case ImportCommand(index: int);
}

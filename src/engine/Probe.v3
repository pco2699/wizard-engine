// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A probe can be inserted at a particular instruction (or all instructions) and fires when the
// instruction is executed.
class Probe {
	// Called when reaching a probe (e.g. before executing an instruction).
	def fire(dynamicLoc: DynamicLoc) -> Resumption { return Resumption.Continue; }
}

type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }

// An object which provides access to the state of an executing frame.
// A {FrameAccessor} is a stateful object that is materialized lazily by calling {TargetFrame.getAccessor()}
// and cached thereafter. It becomes obsolete after the frame is unwound, either because the function returned,
// or a trap or exception unwound the stack.
class FrameAccessor {
	// Returns the Wasm function in this frame.
	def func() -> WasmFunction;
	// Returns the current program counter.
	def pc() -> int;
	// Returns {true} if this frame is currently the top executing frame, {false} if the
	// frame has called another function, returned, or been unwound.
	def isTop() -> bool;
	// Returns {true} if this frame has been unwound, either due to returning, or a trap or exception.
	// If this frame has been unwound, then 
	def isUnwound() -> bool;
	// Returns the call depth of this frame within its segment, with the bottom frame being #0.
	def depth() -> int;
	// Get the caller frame. If none, then {Frame.func} will be {null}.
	// TODO: Convert to CallerFrame that supports host function locations too.
	def caller() -> DynamicLoc;
	// Get the number of local variables in this frame.
	def numLocals() -> int;
	// Get the value of local variable {i}.
	def getLocal(i: int) -> Value;
	// Set the value of a local variable. (dynamically typechecked).
	def setLocal(i: int, v: Value);
	// Get the number of operand stack elements.
	def numOperands() -> int;
	// Get operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc.
	def getOperand(i: int) -> Value;
	// Set operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc. (dynamically typechecked).
	def setOperand(i: int, v: Value);
}

// Internal utility to manage a mutable list of probes. Probe lists are designed to support
// reentrant modifications by deferring changes and then applying them after iteration.
class ProbeList {
	var elem: ProbeElem;
	private var last: ProbeElem;
	var onEnable: void -> void;	// callback when probe list becomes non-empty
	var onDisable: void -> void;	// callback when probe list becomes empty

	private var deferred: Vector<(bool, Probe)>;
	private var defer: bool;

	// Add a new probe to this list. Deferred if the list is currently executing {fire()}.
	def add(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(false, p);
			return;
		}
		var n = ProbeElem.new(p);
		if (last != null) {
			last = last.next = n;
			return;
		}
		last = elem = n;
		if (onEnable != null) onEnable();
	}
	// Remove a probe from this list. Deferred if the list is currently executing {fire()}.
	def remove(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(true, p);
			return;
		}
		var prev: ProbeElem;
		for (e = elem; e != null; (prev = e, e = e.next)) {
			if (e.probe == p) {
				if (prev != null) prev.next = e.next;
				else elem = e.next;
				if (e == last) last = prev;
				break;
			}
		}
		if (elem == null && onDisable != null) onDisable();
	}
	// Fire all probes in this list. Defers reentrant changes until after the last probe
	// has fired. If any probe traps, rather than continuing, the last trap is returned.
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var prev = defer; // handle reentrant fire()
		defer = true;
		var result: Resumption = Resumption.Continue;
		for (e = elem; e != null; e = e.next) {
			var r = e.probe.fire(dynamicLoc);
			if (r != Resumption.Continue) result = r;
		}
		defer = prev;
		if (deferred != null && !defer) {
			for (i < deferred.length) {
				var t = deferred[i];
				if (t.0) remove(t.1);
				else add(t.1);
			}
		}
		if (deferred != null) deferred.resize(0);
		return result;
	}
	// Remove all probes.
	def clear() {
		last = elem = null; // TODO: defer clearing too?
		if (onDisable != null) onDisable();
	}
}
// Used internally for singly-linked list management.
class ProbeElem(probe: Probe) {
	var next: ProbeElem;
}
// Utility class to implement timeouts.
class TimeoutProbe(var count: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		if (--count <= 0) return Resumption.Trap(TrapReason.TIMEOUT, true);
		return Resumption.Continue;
	}
}
// Utility class to count calls to {fire()}.
class CountProbe extends Probe {
	var count = 0;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		count++;
		return Resumption.Continue;
	}
}
// Utility class to implement a callback upon {fire()} without needing to extend {Probe}.
class ClosureProbe<P, R>(f: P -> R, param: P) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		f(param);
		return Resumption.Continue;
	}
}

// Utility class to trace an instruction when fired.
class TraceProbe extends Probe {
	def tracer = InstrTracer.new();
	def codeptr = DataReader.new([]);

	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var func = dynamicLoc.func;
		var offset = dynamicLoc.pc;
		codeptr.reset(func.decl.cur_bytecode, offset, func.decl.cur_bytecode.length);
		var module = if(func.instance != null, func.instance.module);
		var out = Trace.OUT;
		var len = out.length;
		var accessor = dynamicLoc.frame.getFrameAccessor();
		out.pad(' ', len + 2 * accessor.depth());
		out.putc('+').putd(offset).puts(": ");

		var opcode = codeptr.data[codeptr.pos];
		if (opcode == InternalOpcode.PROBE.code) {
			out.puts("<probe> ");
			var prev = (codeptr.data, codeptr.pos, codeptr.limit);
			codeptr.reset(func.decl.orig_bytecode, prev.1, prev.2);
			tracer.putInstr(out, module, codeptr);
			codeptr.reset(prev.0, prev.1, prev.2);
		} else {
			tracer.putInstr(out, module, codeptr);
		}
		if (Trace.operands) {
			for (i < accessor.numLocals()) {
				accessor.getLocal(i).render(out.sp());
			}
			var count = accessor.numOperands();
			out.puts(" |");
			for (j = 1 - count; j <= 0; j++) {
				accessor.getOperand(j).render(out.sp());
			}
		}
		out.outln();
		return Resumption.Continue;
	}
}

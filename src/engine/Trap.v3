// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	EXIT,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	FAILED_CAST,
	INVALID_OPCODE,
	TIMEOUT,
	BREAK,
	ERROR
}

component Traps {
	def result(reason: TrapReason) -> Result.Throw {
		return Result.Throw(Trap.new(reason, null, null));
	}
}

// Abrupt return objects are returned to the interpreter or JIT code to signal to unwind their frames.
class AbruptReturn { }

// Throwables are abrupt returns that have stack traces that can be thrown.
class Throwable(var stacktrace: StackSegment) extends AbruptReturn {
	// Prepend more frames to the beginning of the stacktrace.
	def prepend(frames: Array<(WasmFunction, int)>, hf: HostFunction) {
		stacktrace = StackSegment.new(stacktrace, hf, frames);
	}
	def render(buf: StringBuilder) -> StringBuilder;
}

// A trap is a type of abrupt return that has a reason, an optional message, and a stacktrace.
class Trap extends Throwable {
	def reason: TrapReason;
	def msg: string;

	new(reason, msg, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put1("trap[%s", reason.name);
		if (msg != null) buf.puts(", ").puts(msg);
		return buf.puts("]");
	}
}

// An exception is a type of abrupt return that has a tag, values, and a stacktrace.
class Exception extends Throwable {
	def tag: Tag;
	def vals: Array<Value>;

	new(tag, vals, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put1("exception[tag=%d](", tag.decl.sig_index);
		for (i < vals.length) {
			if (i > 0) buf.csp();
			Values.render(vals[i], buf);
		}
		return buf.puts(")");
	}
}

// An error is an internal error.
class InternalError extends Throwable {
	def msg: string;

	new(msg, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("internal error: %s", msg);
	}
}

// A stack segment consists of an array of frames (caller to callee order), an optional host function outcall,
// and a next segment.
class StackSegment(prev: StackSegment, var host: HostFunction, frames: Array<(WasmFunction, int)>) {
}

// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def NO_REG = Reg(0);
// A register allocator that manages the allocated state of each register in a set of register
// pools, where the register state is either *free* or *allocated* one or more non-negative integer
// *assignments*.
// When initially created, a {RegAlloc} has no register pools; they must be set with {setPool(i)}
// prior to use.
// This implementation allocates registers in priority order according to each pool.
class RegAlloc {
	def poolMap: PoolMap;
	private def pools: Array<RegPool32>;
	private def regToPool = poolMap.regToPool;	// for quicker access
	private var freebits: Array<int>;		// free status for each register, by pool
	private var first: Array<int>;			// first assignment of each register
	private var aliases: Array<List<int>>;		// overflow list of each register

	new(poolMap, pools, prev: RegAlloc) {
		if (prev == null) {
			freebits = Array.new(poolMap.numRegPools);
			for (i < freebits.length) freebits[i] = 0xFFFF_FFFF;
			first = Array.new(poolMap.numRegs);
			aliases = Array.new(first.length);
			for (i < first.length) first[i] = -1;
		} else {
			freebits = Arrays.dup(prev.freebits);
			first = Arrays.dup(prev.first);
			aliases = Arrays.dup(prev.aliases);
		}
	}
	// Set the {i}th pool to {pool}.
	def setPool(i: int, pool: RegPool32) -> this {
		pools[i] = pool;
	}
	// Allocate a register of the given {ValueKind} and set its first {assignment}.
	def alloc(kind: ValueKind, assignment: int) -> Reg {
		var p = poolMap.kindToPool[kind.tag];
		if (p < 0) return NO_REG;
		var f = freebits[p], i = 0;
		// XXX: use CTZ (count trailing zeroes) instruction
		if ((f & 0xFFFF) == 0) { i += 16; f >>= 16; }
		if ((f & 0xFF) == 0) { i += 8; f >>= 8; }
		if ((f & 0xF) == 0) { i += 4; f >>= 4; }
		if ((f & 0x3) == 0) { i += 2; f >>= 2; }
		if ((f & 0x1) == 0) { i += 1; f >>= 1; }
		var pool = pools[p];
		if (i >= pool.regs.length) return NO_REG;
		freebits[p] &= ~(1 << u5.view(i));
		var reg = pool.regs[i];
		first[reg.index] = assignment;
		return reg;
	}
	// Free the register {reg}, removing all of its assignments.
	def free(reg: Reg) {
		first[reg.index] = -1;
		aliases[reg.index] = null;
		var p = regToPool[reg.index];
		var i = pools[p].map[reg.index];
		freebits[p] |= (1 << i);
	}
	// Returns {true} if {reg} has no assignments.
	def isFree(reg: Reg) -> bool {
		return first[reg.index] < 0;
	}
	// Add an {assignment} to the register {reg}.
	def assign(reg: Reg, assignment: int) {
		if (first[reg.index] >= 0) {
			// already assigned; add an alias
			aliases[reg.index] = List.new(assignment, aliases[reg.index]);
			return;
		}
		// not assigned yet; add the assignment and set as not free
		first[reg.index] = assignment;
		var p = regToPool[reg.index];
		var i = pools[p].map[reg.index];
		freebits[p] &= ~(1 << i);
	}
	// Change one assignment of {reg} from {before} to {after}.
	// Returns {true} if the register did have the assignment {before}.
	def reassign(reg: Reg, before: int, after: int) -> bool {
		var assignment = first[reg.index];
		if (assignment == before) {
			// Common, fast case; just adjust the assignment.
			first[reg.index] = after;
			return true;
		}
		// General case, just unassign and assign.
		return (unassign(reg, before), assign(reg, after)).0; // XXX: additional inline cases?
	}
	// Remove the {assignment} from {reg} if it has that assignment.
	// Frees the register if the last assignment is removed.
	// Returns {true} if the register did have the assignment.
	def unassign(reg: Reg, assignment: int) -> bool {
		var l = aliases[reg.index];
		if (l == null) { // no aliases
			if (first[reg.index] == assignment) { // free if the assignment matches
				first[reg.index] = -1;
				var p = regToPool[reg.index];
				var i = pools[p].map[reg.index];
				freebits[p] |= (1 << i);
				return true;
			}
			return false; // no such alias
		}
		if (first[reg.index] == assignment) { // first assignment matches
			first[reg.index] = l.head;
			aliases[reg.index] = l.tail;
			return true;
		}
		// XXX: recursively remove {assignment} from aliases, which could copy the entire list.
		var n = recursivelyRemoveItem(assignment, l);
		aliases[reg.index] = n;
		return n != l;
	}
	private def recursivelyRemoveItem(i: int, l: List<int>) -> List<int> {
		if (l == null) return null;
		if (l.head == i) return l.tail;
		var t = l.tail;
		var n = recursivelyRemoveItem(i, t);
		return if(t == n, l, List.new(l.head, n));
	}
	// Returns the "frequency" of {reg}, which is an approximate count such that {0}=free,
	// {1}=exactly one assignment, {2}=more than one assignment.
	def frequency(reg: Reg) -> u2 {
		if (first[reg.index] < 0) return 0;
		return if(aliases[reg.index] == null, 1, 2);
	}
	// Remove all assignments for all registers.
	def clear() -> this {
		for (i < freebits.length) freebits[i] = 0xFFFF_FFFF;
		for (i < first.length) first[i] = -1;
		for (i < aliases.length) aliases[i] = null;
	}
	// Make a copy of this register allocator, including all of its current assignments.
	def copy() -> RegAlloc {
		return RegAlloc.new(poolMap, pools, this);
	}
	// Finds the allocated register of {kind} with the lowest score. The {addSpillCost}
	// function takes {(score, reg, assign)} and should add the additional spill cost
	// of the register {reg} with assignment {assign}.
	def findSpillCandidate(kind: ValueKind, addSpillCost: (int, Reg, int) -> int) -> Reg {
		var lowest = int.max, reg: Reg;
		var p = poolMap.kindToPool[kind.tag];
		var regs = pools[p].regs;
		var alloc = ~freebits[p];
		var i = 0;
		for (i = 0; alloc != 0; (alloc = alloc >> 1, i++)) {
			if (1 != (alloc & 1)) continue; // register is free
			var candidate = regs[i];
			var score = addSpillCost(0, candidate, first[candidate.index]);
			if (score >= lowest) continue;  // cannot be lowest
			var l = aliases[candidate.index];
			while (true) {
				if (l == null) { // no more aliases, score is lowest
					lowest = score;
					reg = candidate;
					break;
				}
				score = addSpillCost(score, candidate, l.head);
				if (score >= lowest) break;
				l = l.tail;
			}
		}
		return reg;
	}
	// Calls {func} for each allocated register.
	def forEachAllocatedReg<T>(reg: Reg, func: Reg -> T) {
		for (p < pools.length) {
			var alloc = ~freebits[p];
			var regs = pools[p].regs;
			var i = 0;
			while (alloc != 0) {
				if (1 == (alloc & 1)) func(regs[i]);
				alloc = alloc >> 1;
				i++;
			}
		}
	}
	// Calls {func} for every assignment of {reg}.
	def forEachAssignment<T>(reg: Reg, func: int -> T) {
		var assignment = first[reg.index];
		if (assignment >= 0) {
			func(assignment);
			for (l = aliases[reg.index]; l != null; l = l.tail) func(l.head);
		}
	}
	def forEachAssignmentInRange<T>(reg: Reg, min: int, max: int, func: int -> T) {
		var assignment = first[reg.index];
		if (assignment >= 0) {
			if (assignment >= min && assignment < max) func(assignment);
			for (l = aliases[reg.index]; l != null; l = l.tail) {
				var next = l.head;
				if (next >= min && next < max) func(next);
			}
		}
	}
	def render(buf: StringBuilder, regSet: RegSet) -> StringBuilder {
		for (p < pools.length) {
			if (p > 0) buf.csp();
			buf.put1("pool[%d]={", p);

			var alloc = ~freebits[p];
			var regs = pools[p].regs;
			var j = 0;
			for (i = 0; alloc != 0; (alloc = alloc >> 1, i++)) {
				if (1 != (alloc & 1)) continue;
				if (j++ > 0) buf.csp();
				var reg = regs[i];
				buf.puts(regSet.getName(reg));
				buf.puts("={");
				var assignment = first[reg.index];
				buf.putd(assignment);
				for (l = aliases[reg.index]; l != null; l = l.tail) buf.put1(",%d", l.head);
				buf.puts("}");
			}

			buf.puts("}");
		}
		return buf;
	}
}

// Allocates registers from pool number {poolIndex} from {regConfig}.
//
// Internally, both allocated and free registers are maintained in one doubly-linked list.
// The {freeCursor} points at the first free register, and the free list follows {.next} links.
// Allocated registers are kept in the list pointed to by {freeCursor.prev} and can be iterated by
// following {.prev} links.
//
// links [0, rax,       rbx,     rcx     .... ]
//            v          v         v
//           [rax] <-> [rbx] <-> [rcx]
//                                 ^
//   (allocated registers) <--  freeCursor  --> (free registers)
class SpcRaPool(regConfig: RegConfig, poolIndex: int) {
	private def links = Array<SpcRaPoolLink>.new(regConfig.regSet.regs.length);
	private var freeCursor: SpcRaPoolLink;
	private var last: SpcRaPoolLink;

	new() {
		freeCursor = null;
		freeAll();
	}

	// Free all allocated registers and reset their state in {regState} to be {freeVal}.
	def freeAllAndResetState<T>(regState: Array<T>, freeVal: T) {
		var l = freeCursor;
		while (l.prev != null) {
			var n = l.prev;
			regState[n.reg.index] = freeVal;
			l = n;
		}
		freeCursor = l;
	}
	// Free all registers and reset the order back to the default order in {this.regConfig}.
	def freeAll() {
		freeAllAndResetOrder(regConfig.regSet.regs);
	}
	// Free all registers and reset the allocation order of registers to the order specified in {order}.
	def freeAllAndResetOrder(order: Array<Reg>) {
		var prev: SpcRaPoolLink;
		for (reg in order) {
			if (reg == NO_REG) continue;
			if (regConfig.poolMap.regToPool[reg.index] != poolIndex) continue; // skip regs not in pool
			var link = links[reg.index];
			if (link != null) link.remove(); // reuse link if possible
			else link = SpcRaPoolLink.new(reg, prev, null);
			if (prev != null) prev.next = link;
			else freeCursor = link;
			links[reg.index] = link;
			prev = link;
		}
		// TODO: what about dangling links not in {order}?
		if (last == null) last = SpcRaPoolLink.new(NO_REG, prev, null);
		else last.prev = prev;
		prev.next = last;
	}
	// Allocate the a register from this pool. Returns {NO_REG} if none available.
	def alloc() -> Reg {
		var result = freeCursor.reg;
		if (result != NO_REG) freeCursor = freeCursor.next;
		return result;
	}
	// Free the given register {reg}.
	def free(reg: Reg) {
		var link = links[reg.index];
		if (link == freeCursor) return; // already free; ok
		if (link == freeCursor.prev) {
			freeCursor = freeCursor.prev; // cheap bump-back of freeCursor
		} else {
			link.remove();
			link.insertBefore(freeCursor); // remove and reinsert before prev
			freeCursor = link;
		}
	}
	// Set the given register {reg} as allocated.
	def unfree(reg: Reg) {
		var link = links[reg.index];
		if (link == freeCursor) {
			freeCursor = freeCursor.next;
		} else {
			link.remove();
			link.insertBefore(freeCursor); // remove and reinsert before prev
		}
	}
	// Call {allocated} and {free} with all appropriate registers.
	def apply<T>(allocated: Reg -> T, free: Reg -> T) {
		for (l = freeCursor.prev; l != null; l = l.prev) allocated(l.reg);
		for (l = freeCursor; l.reg != NO_REG; l = l.next) free(l.reg);
	}
	// Search the allocated list for the register with the minimum associated {cost}.
	// Does not alter the allocation status of the register.
	def findMinAllocated(cost: Reg -> int) -> Reg {
		var minimum = int.max;
		var minReg = NO_REG;
		for (l = freeCursor.prev; l != null; l = l.prev) {
			var reg = l.reg, c = cost(reg);
			if (c == 0) return reg; // can't do better than 0.
			if (c < minimum) {
				minimum = c;
				minReg = reg;
			}
		}
		return minReg;
	}
	// Verify internal states and report errors to {out}. Returns {true} if the verification passed.
	def verify(out: TraceBuilder) -> bool {
		return true;
	}
}

private class SpcRaPoolLink(reg: Reg, var prev: SpcRaPoolLink, var next: SpcRaPoolLink) {
	def remove() -> this {
		var n = next, p = prev;
		if (p != null) p.next = n;
		if (n != null) n.prev = p;
		next = prev = null;
	}
	def insertBefore(that: SpcRaPoolLink) -> this {
		// TODO assert prev == null;
		// TODO assert next == null;
		next = that;
		var p = that.prev;
		prev = p;
		if (p != null) p.next = this;
		that.prev = this;
	}
}

// Represents the abstract control and value stacks during single-pass compilation, as well as
// the register allocation state. The register allocation state is intimately intertwined with the
// value stack representation, and efficient implementation of the control stack requires a
// snapshotting mechanism.
class SpcState2(regConfig: RegConfig) {
	def regPools = Array<SpcRaPool>.new(regConfig.poolMap.numRegPools);
	var valState: Array<SpcVal>;

	new() {
		for (i < regPools.length) regPools[i] = SpcRaPool.new(regConfig, i);
	}

	// Operations that modify the control stack.
	def pushBlock(params: Array<ValueType>, results: Array<ValueType>, end_label: MasmLabel) -> SpcControl;
	def pushLoop(params: Array<ValueType>, results: Array<ValueType>, start_label: MasmLabel) -> SpcControl;
	def pushIf(params: Array<ValueType>, results: Array<ValueType>, else_label: MasmLabel, end_label: MasmLabel) -> SpcControl;
	def doElse();
	def resetToMerge(ctl: SpcControl);
	def isTransferEmpty(target: SpcControl);
	def emitFallthru(resolver: SpcMoveResolver);
	def emitTransfer(target: SpcControl, resolver: SpcMoveResolver);
	def prepareLoop(resolver: SpcMoveResolver);
	def prepareRangeForMerge(start: u32, end: u32, resolver: SpcMoveResolver);
	def setUnreachable();

	// Operations that modify the value stack by pushing, popping, or altering values.
	def push(flags: byte, reg: Reg, const: int);
	def pop() -> SpcVal;
	def popReg() -> SpcVal;
	def popFixedReg(reg: Reg) -> SpcVal;
	def popRegToOverwrite() -> SpcVal;
	def popFixedRegToOverwrite(reg: Reg) -> SpcVal;
	def setSlot(flags: byte, reg: Reg, const: int);

	// Operations that modify the value stack's register allocation or spill state.
	def peek() -> SpcVal;
	def spillSlot(slot: u32);
	def spillAll();
	def killSlot(slot: u32);
	def killAll();

	// Operations that only affect register state.
	def allocReg(kind: ValueKind, slot: u32) -> Reg;
	def refReg(reg: Reg, slot: u32);
	def assertReffed(reg: Reg, slot: u32);
	def unrefReg(reg: Reg, slot: u32);
	def allocTmp(kind: ValueKind) -> Reg;
	private def snapshotInto(s: SpcRaSnapshot);
	private def restoreFrom(s: SpcRaSnapshot);
	def freeTmps();
}

class SpcRaSnapshot {
	var valState: Array<SpcVal>;
	var sp: int;

	def resize(s: int) -> this;
}

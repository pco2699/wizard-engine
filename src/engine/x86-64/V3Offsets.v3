// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def mems = Array<Memory>.new(2);
def RT: X86_64Runtime;
def I: X86_64Interpreter;
// Computes the field offsets of specific V3 fields that are used in generated code.
class V3Offsets {
	private def module = Module.new("<null>");
	private def sig = SigCache.i_i;
	private def decl = FuncDecl.new(0);
	private def i = Instance.new(module, null);
	private def t = Table.new(ValueType.I32, TableDecl.new(ValueType.I32, 0, Max.Set(1)));
	private def wf = WasmFunction.new(i, decl);
	private def mem = X86_64Memory.new(null);
	private def vs = ValueStack.new(4096);
	private def ha = HeapArray.new(null, []);

	def Function_sig		= int.view(Pointer.atField(wf.sig) - Pointer.atObject(wf));
	def WasmFunction_instance	= int.view(Pointer.atField(wf.instance) - Pointer.atObject(wf));
	def WasmFunction_decl		= int.view(Pointer.atField(wf.decl) - Pointer.atObject(wf));

	def FuncDecl_sig		= int.view(Pointer.atField(decl.sig) - Pointer.atObject(decl));
	def FuncDecl_cur_bytecode	= int.view(Pointer.atField(decl.cur_bytecode) - Pointer.atObject(decl));
	def FuncDecl_orig_bytecode	= int.view(Pointer.atField(decl.orig_bytecode) - Pointer.atObject(decl));
	def FuncDecl_sidetable		= int.view(Pointer.atField(decl.sidetable) - Pointer.atObject(decl));
	def FuncDecl_target_code	= int.view(Pointer.atField(decl.target_code) - Pointer.atObject(decl));
	def FuncDecl_tierup_trigger	= int.view(Pointer.atField(decl.tierup_trigger) - Pointer.atObject(decl));

	def SigDecl_params		= int.view(Pointer.atField(sig.params) - Pointer.atObject(sig));
	def SigDecl_results		= int.view(Pointer.atField(sig.results) - Pointer.atObject(sig));

	def Instance_memories		= int.view(Pointer.atField(i.memories) - Pointer.atObject(i));
	def Instance_functions		= int.view(Pointer.atField(i.functions) - Pointer.atObject(i));
	def Instance_globals		= int.view(Pointer.atField(i.globals) - Pointer.atObject(i));
	def Instance_tables		= int.view(Pointer.atField(i.tables) - Pointer.atObject(i));
	def Instance_sig_ids		= int.view(Pointer.atField(i.sig_ids) - Pointer.atObject(i));
	def Instance_dropped_elems	= int.view(Pointer.atField(i.dropped_elems) - Pointer.atObject(i));
	def Instance_dropped_data	= int.view(Pointer.atField(i.dropped_data) - Pointer.atObject(i));
	def Instance_abscodes		= int.view(Pointer.atField(i.abscodes) - Pointer.atObject(i));

	def Table_funcs			= int.view(Pointer.atField(t.funcs) - Pointer.atObject(t));
	def Table_elems			= int.view(Pointer.atField(t.elems) - Pointer.atObject(t));
	def Table_ids			= int.view(Pointer.atField(t.ids) - Pointer.atObject(t));

	def Array_length		= int.view(Pointer.atLength(mems) - Pointer.atObject(mems));
	def Array_contents		= int.view(Pointer.atContents(mems) - Pointer.atObject(mems));

	def X86_64Memory_start		= int.view(Pointer.atField(mem.start) - Pointer.atObject(mem));
	def X86_64Memory_limit		= int.view(Pointer.atField(mem.limit) - Pointer.atObject(mem));

	def Interpreter_valueStack	= Pointer.atField(RT.valueStack);
	def Interpreter_dispatchTable	= Pointer.atField(I.dispatchTable);
	def ValueStack_sp		= int.view(Pointer.atField(vs.sp) - Pointer.atObject(vs));

	def WasmFunction_typeId		= Pointer.atObject(wf).load<int>();

	def HeapArray_vals		= int.view(Pointer.atField(ha.vals) - Pointer.atObject(ha));

	// Try to future-proof for compressed references someday and use REF_SIZE everywhere
	def REF_SIZE			= byte.!(Pointer.atElement(mems, 1) - Pointer.atElement(mems, 0));
	def INT_SIZE: byte		= 4;

	def STP_pc_delta = 0;
	def STP_valcount = 4;
	def STP_popcount = 8;
	def STP_stp_delta = 12;
	def STP_entry_size = 16;
	def STP_entry_size_log: u5 = 4;
}

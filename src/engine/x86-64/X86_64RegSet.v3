// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Describes the set of architectural registers for X86-64.
component X86_64Regs2 {
	// local state used during building of {SET} and {CONFIG}
	def NO_REG = Reg(0);
	private def GPRS = Array<X86_64Gpr>.new(256);	// fast mapping byte -> GPR
	private def XMMS = Array<X86_64Xmmr>.new(256);	// fast mapping byte -> XMM
	private var all = Vector<Reg>.new().grow(32).put(NO_REG);
	private var ints = Vector<(Reg, int)>.new().grow(16);
	private var floats = Vector<Reg>.new().grow(16);
	private var names = Vector<string>.new().grow(32).put(null);
	private var num: byte = 1;
	private def roleToReg = Array<Reg>.new(RegRole.TLS.tag + 1);

	// Registers, roles, and allocation order
	def RAX = addGpr(X86_64Regs.RAX, RegRole.IP,		0);
	def RCX = addGpr(X86_64Regs.RCX, RegRole.NONE,		3);
	def RDX = addGpr(X86_64Regs.RDX, RegRole.NONE,		4);
	def RBX = addGpr(X86_64Regs.RBX, RegRole.STP,		1);
	def RSP = addGpr(X86_64Regs.RSP, RegRole.SP,		-1);
	def RBP = addGpr(X86_64Regs.RBP, RegRole.SCRATCH,	-1);
	def RSI = addGpr(X86_64Regs.RSI, RegRole.VSP,		2);
	def RDI = addGpr(X86_64Regs.RDI, RegRole.INSTANCE,	-1);
	def R8  = addGpr(X86_64Regs.R8,  RegRole.NONE,		5);
	def R9  = addGpr(X86_64Regs.R9,  RegRole.NONE,		6);
	def R10 = addGpr(X86_64Regs.R10, RegRole.MEM0_BASE,	-1); // XXX: use a low8 reg in JIT code
	def R11 = addGpr(X86_64Regs.R11, RegRole.VFP,		-1);
	def R12 = addGpr(X86_64Regs.R12, RegRole.FUNC_DECL,	7);
	def R13 = addGpr(X86_64Regs.R13, RegRole.EIP,		8);
	def R14 = addGpr(X86_64Regs.R14, RegRole.DISPATCH,	9);
	def R15 = addGpr(X86_64Regs.R15, RegRole.NONE,		10);

	def XMM0 = addXmmr(X86_64Regs.XMM0);
	def XMM1 = addXmmr(X86_64Regs.XMM1);
	def XMM2 = addXmmr(X86_64Regs.XMM2);
	def XMM3 = addXmmr(X86_64Regs.XMM3);
	def XMM4 = addXmmr(X86_64Regs.XMM4);
	def XMM5 = addXmmr(X86_64Regs.XMM5);
	def XMM6 = addXmmr(X86_64Regs.XMM6);
	def XMM7 = addXmmr(X86_64Regs.XMM7);
	def XMM8 = addXmmr(X86_64Regs.XMM8);
	def XMM9 = addXmmr(X86_64Regs.XMM9);
	def XMM10 = addXmmr(X86_64Regs.XMM10);
	def XMM11 = addXmmr(X86_64Regs.XMM11);
	def XMM12 = addXmmr(X86_64Regs.XMM12);
	def XMM13 = addXmmr(X86_64Regs.XMM13);
	def XMM14 = addXmmr(X86_64Regs.XMM14);
	def XMM15 = addXmmr(X86_64Regs.XMM15);

	def SET = buildRegSet();
	def CONFIG = buildRegConfig();
	def SPC_ALLOC = buildSpcAlloc();

	private def addGpr(gpr: X86_64Gpr, role: RegRole, allocation_order: int) -> Reg {
		var reg = Reg(num++);
		all.put(reg);
		if (allocation_order >= 0) ints.put(reg, allocation_order);
		if (role != RegRole.NONE) roleToReg[role.tag] = reg;
		names.put(gpr.name64);
		GPRS[reg.index] = gpr;
		return reg;
	}
	private def addXmmr(xmm: X86_64Xmmr) -> Reg {
		var reg = Reg(num++);
		all.put(reg);
		floats.put(reg);
		names.put(xmm.name);
		XMMS[reg.index] = xmm;
		return reg;
	}
	private def buildRegSet() -> RegSet {
		var set = RegSet.new(all.extract(), names.extract());
		return set;
	}
	private def buildRegConfig() -> RegConfig {
		roleToReg[RegRole.FUNC_ARG.tag] = RDX;
		roleToReg[RegRole.RET_ABRUPT.tag] = RAX;	// XXX: Target.RET_REGS[0]
		roleToReg[RegRole.RUNTIME_ARG_0.tag] = RSI;
		roleToReg[RegRole.RUNTIME_ARG_1.tag] = RDX;
		roleToReg[RegRole.RUNTIME_ARG_2.tag] = RCX;

		var config = RegConfig.new(SET, RegRoles.new(roleToReg));
		def frame = IVarConfig.frame;

		config.spcFrameSize = frame.size;
		config.vsp_offset = frame.VSP.disp;
		config.vfp_offset = frame.VFP.disp;
		config.eip_offset = frame.EIP.disp;
		config.stp_offset = frame.STP.disp;
		config.instance_offset = frame.INSTANCE.disp;
		config.accessor_offset = frame.ACCESSOR.disp;
		config.wasm_func_offset = frame.WASM_FUNC.disp;
		config.func_decl_offset = frame.FUNC_DECL.disp;
		config.mem_offset = frame.MEM0_BASE.disp;

		var poolMap = PoolMap.new(SET, 2);
		for (i < poolMap.regToPool.length) poolMap.regToPool[i] = -1;

		for (i < ints.length) {
			var r = ints[i];
			poolMap.regToPool[r.0.index] = 0;
		}
		for (i < floats.length) {
			var r = floats[i];
			poolMap.regToPool[r.index] = 1;
		}

		poolMap.kindToPool[ValueKind.I32.tag] = 0;
		poolMap.kindToPool[ValueKind.I64.tag] = 0;
		poolMap.kindToPool[ValueKind.F32.tag] = 1;
		poolMap.kindToPool[ValueKind.F64.tag] = 1;
		poolMap.kindToPool[ValueKind.V128.tag] = 1;
		poolMap.kindToPool[ValueKind.REF.tag] = 0;

		config.poolMap = poolMap;
		return config;
	}

	def toGpr(reg: Reg) -> X86_64Gpr { return GPRS[reg.index]; }
	def toXmmr(reg: Reg) -> X86_64Xmmr { return XMMS[reg.index]; }

	def buildSpcAlloc() -> RegAlloc {
		var intOrder = Vector<Reg>.new().resize(ints.length);
		var max = int.min;
		for (i < ints.length) {
			var r = ints[i];
			if (r.1 < 0) continue;
			intOrder[r.1] = r.0;
			if (r.1 > max) max = r.1;
		}
		intOrder.resize(max);
		var pools = [
			RegPool32.new(intOrder.extract()),
			RegPool32.new([XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14])
		];
		return RegAlloc.new(CONFIG.poolMap, pools, null);
	}
	def buildIntAlloc() -> RegAlloc {
		var pools = [
			RegPool32.new([RCX, RDX, R8, R9]),
			RegPool32.new([XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14])
		];
		return RegAlloc.new(CONFIG.poolMap, pools, null);
	}
}

// Configuration of which register contains which interpreter variables.
class IVarRegs {
	def v3_WASM_FUNC	= Target.V3_PARAM_GPRS[1];
	def v3_VSP		= Target.V3_PARAM_GPRS[2];

	def DISPATCH_TABLE	= X86_64Regs.R14;
	def MEM0_BASE		= X86_64Regs.R10;
	def VFP			= X86_64Regs.R11;
	def VSP			= X86_64Regs.RSI;
	def STP			= X86_64Regs.RBX;
	def IP			= X86_64Regs.RAX;
	def EIP			= X86_64Regs.R13;
	def FUNC_DECL		= X86_64Regs.R12;
	def INSTANCE		= X86_64Regs.RDI;
	def CURPC		= X86_64Regs.R15;

	def IP_ptr		= IP.plus(0);

	def xmm0		= X86_64Regs.XMM0;
	def xmm1		= X86_64Regs.XMM1;
	def xmm2		= X86_64Regs.XMM2;
	def xmm3		= X86_64Regs.XMM3;

	def tmp0		= X86_64Regs.RCX;
	def tmp1		= X86_64Regs.RDX;
	def tmp2		= X86_64Regs.RBP;
	def tmp3		= X86_64Regs.R8;
	def tmp4		= X86_64Regs.R9;

	def scratch		= X86_64Regs.RBP; // XXX: just use tmp5?
}

class IVarFrame {
	def WASM_FUNC	= X86_64Regs.RSP.plus(0);
	def MEM0_BASE	= X86_64Regs.RSP.plus(8);
	def VFP		= X86_64Regs.RSP.plus(16);
	def VSP		= X86_64Regs.RSP.plus(24);
	def SIDETABLE	= X86_64Regs.RSP.plus(32);
	def STP		= X86_64Regs.RSP.plus(40);
	def CODE	= X86_64Regs.RSP.plus(48);
	def IP		= X86_64Regs.RSP.plus(56);
	def EIP		= X86_64Regs.RSP.plus(64);
	def FUNC_DECL	= X86_64Regs.RSP.plus(72);
	def INSTANCE	= X86_64Regs.RSP.plus(80);
	def CURPC	= X86_64Regs.RSP.plus(88);
	def ACCESSOR	= X86_64Regs.RSP.plus(96);

	def size = 104;
}

component IVarConfig {
	def regs = IVarRegs.new();
	def frame = IVarFrame.new();
	def frameSize = frame.size;
}

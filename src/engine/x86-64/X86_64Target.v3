// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def RT: X86_64Runtime;
def PAGE_SIZE = 4096u;
def PAGE_SIZE_i: int = 4096;
// Contains target-specific factory functions.
component Target {
	def V3_PARAM_GPRS = [X86_64Regs.RDI, X86_64Regs.RSI, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.R8, X86_64Regs.R9]; 		// System-V
	def V3_RET_GPRS = [X86_64Regs.RAX, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.RSI]; 			// System-V + 2

	def limit_memory_pages = 65536u;
	def newMemory = X86_64Memory.new;
	def forceGC = RiGc.forceGC;
	def tagging = Tagging.new(!FeatureDisable.valueTags, !FeatureDisable.simd);

	new() {
		ExecuteOptions.registerMode("jit", X86_64SpcAotStrategy.new(), "ahead-of-time compile entire module with SPC");
		ExecuteOptions.registerMode("lazy", X86_64SpcLazyStrategy.new(), "lazy-compile functions on demand with SPC");
		ExecuteOptions.registerMode("dyn", X86_64DynamicStrategy.new(), "fast interpreter with dynamic tier-up to SPC");
		ExecuteOptions.registerDefaultMode("int", X86_64InterpreterOnlyStrategy.new(),
			"fast interpreter only");
		Execute.probes.onEnable = X86_64Interpreter.onProbeEnable;
		Execute.probes.onDisable = X86_64Interpreter.onProbeDisable;
	}

	def setTargetCode(f: FuncDecl, addr: Pointer) {
		if (Trace.compiler) Trace.OUT.put2("func[%d].target_code: break *0x%x", f.func_index, addr - Pointer.NULL).outln();
		f.target_code = TargetCode(addr);
		Debug.afterCompile(f, u64.view(addr - Pointer.NULL));
	}
	def genInterpreterIntoFile(filename: string) -> ErrorBuilder {
		var data = System.fileLoad(filename);
		var err = ErrorBuilder.new().puts("interpreter generator: ");
		if (data == null) return err.put1("could not load executable %s\n", filename);
		var ok = X86_64PreGenStubs.genAndWriteIntoExecutable(data);
		if (ok == false) return err.put1("could not patch executable %s\n", filename);
		var fd = System.fileOpen(filename, false);
		if (fd < 0) return err.put1("could not write executable: %s\n", filename);
		System.fileWriteK(fd, data, 0, data.length);
		System.fileClose(fd);
		return null;
	}
	def mapCode(asm: X86_64Assembler, prepare: (X86_64Assembler, u64) -> void) -> Mapping {
		var w = asm.w;
		var length = u64.view(w.atEnd().pos);
		var mapping = Mmap.reserve(length, Mmap.PROT_WRITE), range = mapping.range;
		if (prepare != null) prepare(asm, u64.view(range.start - Pointer.NULL));
		var t = range.start;
		var f = Pointer.atContents(w.data);
		for (i = 0; i < length; i += Pointer.SIZE) { // XXX: manual memcopy
			t.store<Pointer>(f.load<Pointer>());
			t += Pointer.SIZE;
			f += Pointer.SIZE;
		}
		Mmap.protect(range.start, u64.!(range.end - range.start), Mmap.PROT_READ | Mmap.PROT_EXEC);
		return mapping;
	}
	def copyInto(range: MemoryRange, offset: int, w: DataWriter) -> int {
		var t = range.start + offset;
		var f = Pointer.atContents(w.data);
		var length = w.atEnd().pos;
		for (i = 0; i < length; i += Pointer.SIZE) { // XXX: manual memcopy
			t.store<Pointer>(f.load<Pointer>());
			t += Pointer.SIZE;
			f += Pointer.SIZE;
		}
		return offset + length;
	}
	def setTieredEntrypoint(module: Module) { // TODO: remove, move all tests/entrypoints to validation
		// With multi-tier support, the interpreter calls through target code, so every
		// function needs a proper entrypoint.
		if (FeatureDisable.multiTier) return;
		var ic = X86_64PreGenStubs.getInterpreterCode();
		var entry = ic.start + ic.intSpcEntryOffset;
		for (i < module.functions.length) {
			var f = module.functions[i];
			f.target_code = TargetCode(entry);
		}
	}
	def setUnconditionalInterpreterEntryIfMultiTier(f: FuncDecl) {
		// With multi-tier support, the interpreter calls through target code, so every
		// function needs a proper entrypoint.
		if (FeatureDisable.multiTier) return;
		var ic = X86_64PreGenStubs.getInterpreterCode();
		var entry = ic.start + ic.intSpcEntryOffset;
		f.target_code = TargetCode(entry);
	}
	def rdtsc() -> u64 {
		return X86_64PreGenStubs.getRdtscFunc()();
	}
}

type TargetOsrInfo(spc_entry: Pointer, osr_entries: List<(int, int)>) #unboxed { }
type TargetCode(spc_entry: Pointer) #unboxed { }
type TargetModule(spc_code: X86_64SpcModuleCode) #unboxed { }
type TargetFrame(sp: Pointer) #unboxed {
	def getFrameAccessor() -> FrameAccessor {
		return RT.getFrameAccessor(sp);
	}
}

class X86_64ExecutionStrategy extends ExecutionStrategy {
}

// One tier: fast-int, modules require no pre-processing.
class X86_64InterpreterOnlyStrategy extends X86_64ExecutionStrategy {
	// Call a function with arguments and return a result.
	def call(func: Function, args: Array<Value>) -> Result {
		return X86_64Runtime.run(func, args); // XXX: specialize for interpreter-only
	}
	def onFuncValidationFinish(module: Module, func: FuncDecl, err: ErrorGen) {
		if (err != null && !err.ok()) return;
		Target.setUnconditionalInterpreterEntryIfMultiTier(func);
	}
	def onNewFunction(wf: WasmFunction, err: ErrorGen) {
		Target.setUnconditionalInterpreterEntryIfMultiTier(wf.decl);
	}
}

// One tier: SPC, modules are eagerly compiled.
class X86_64SpcAotStrategy extends X86_64ExecutionStrategy {
	var hasMonitors = false;

	// Called if monitors will be attached to the (forthcoming) module.
	def onMonitorsStart() {
		hasMonitors = true;
	}
	// Called after a module is parsed.
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) {
		// defer compilation for AOT mode until after monitors have been installed
		if (!hasMonitors) compileEntireModule(module, size, err);
	}
	// Called after monitors have processed a module.
	def onMonitorsFinish(module: Module, err: ErrorGen) {
		compileEntireModule(module, 0, err);
	}
	// Called before a test function is run.
	def onTestRun(wf: WasmFunction, err: ErrorGen) {
		if (wf.decl.target_code.spc_entry == Pointer.NULL) {
			compileEntireModule(wf.instance.module, 0, err); // XXX: compile individual functions in test
		}
	}
	// Call a function with arguments and return a result.
	def call(func: Function, args: Array<Value>) -> Result {
		return X86_64Runtime.run(func, args); // XXX: specialize for JIT-only, do lazy compile
	}
	private def compileEntireModule(module: Module, size: u32, err: ErrorGen) {
		// ensure entrypoint and lazy compile stubs are generated
		X86_64PreGenStubs.gen();
		X86_64Spc.setLazyCompile(null);
		X86_64Spc.setTierUpCompile(null);

		var compiler = newCompiler(module.filename);
		var w = compiler.w;

		// generate code for all functions
		var starts = Array<int>.new(module.functions.length);
		for (i = 0; err.ok() && i < module.functions.length; i++) { // TODO: graceful bailouts
			var f = module.functions[i];
			if (f.imported()) continue;
			starts[i] = w.atEnd().pos;
			var compiled = compiler.gen(module, f);
			if (!compiled) starts[i] = -1;
		}

		// copy and map code
		var length = u64.view(w.atEnd().pos);
		var mapping = Mmap.reserve(length, Mmap.PROT_WRITE), range = mapping.range; // TODO: handle failure
		var masm = X86_64MacroAssembler.!(compiler.masm);
		masm.setTargetAddress(u64.view(range.start - Pointer.NULL));
		Target.copyInto(mapping.range, 0, w);
		Mmap.protect(range.start, u64.!(range.end - range.start), Mmap.PROT_READ | Mmap.PROT_EXEC);
		for (i < starts.length) {
			if (starts[i] >= 0) {
				var addr = mapping.range.start + starts[i];
				var f = module.functions[i];
				Target.setTargetCode(f, addr);
			} else { // TODO: use interpreter for bailouts for non-AOT mode
			}
		}
		var code = X86_64SpcModuleCode.new(mapping);
		if (masm.source_locs != null) {
			code.sourcePcs = Vector.new();
			code.sourcePcs.putv(masm.source_locs);
		}

		module.target_module = TargetModule(code);
		RiRuntime.registerUserCode(code);
		module.target_module.spc_code.keepAlive();
		Debug.afterCompileModule(module);
	}
	def onNewFunction(wf: WasmFunction, err: ErrorGen) {
		Target.setUnconditionalInterpreterEntryIfMultiTier(wf.decl);
	}
}

// One tier: SPC, functions are lazily compiled.
class X86_64SpcLazyStrategy extends X86_64ExecutionStrategy {
	// Called after a module is parsed.
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) {
		installLazyCompileStubForModule(module, err);
	}
	// Called before a test function is run.
	def onTestRun(wf: WasmFunction, err: ErrorGen) { // TODO: move this to onFuncValidationFinish
		installLazyCompileStubForModule(wf.instance.module, err);
	}
	// Call a function with arguments and return a result.
	def call(func: Function, args: Array<Value>) -> Result {
		return X86_64Runtime.run(func, args); // XXX: specialize for JIT-only, do lazy compile
	}
	private def installLazyCompileStubForModule(module: Module, err: ErrorGen) {
		// TODO: lazy-allocate module code too
		// ensure entrypoint and lazy compile stubs are generated
		X86_64PreGenStubs.gen();
		X86_64Spc.setLazyCompile(lazyCompile);
		X86_64Spc.setTierUpCompile(null);
		// Set all functions to refer to the lazy compile stub.
		var codeSize = MINIMUM_CODE_SIZE;
		for (i = 0; err.ok() && i < module.functions.length; i++) {
			var f = module.functions[i];
			if (f.imported()) continue;
			X86_64Spc.setLazyCompileFor(f);
			codeSize += X86_64Spc.estimateCodeSizeFor(f);
		}
		allocateCodeForModule(module, codeSize);
	}
	private def lazyCompile(wf: WasmFunction) -> (WasmFunction, Pointer, Throwable) {
		var module = wf.instance.module;
		var code = module.target_module.spc_code;
		var compiler = newCompiler(module.filename); // XXX: cache per-thread
		var masm = X86_64MacroAssembler.!(compiler.masm), w = masm.asm.w;

		// generate code for the function
// XXX:		w.align(8);
		compiler.gen(module, wf.decl);

		// Check for remaining code space
		var regionSize = code.mapping.range.size();
		var remaining = regionSize - u64.!(code.codeEnd);
		var codeSize = w.atEnd().pos;
		if (codeSize > remaining) compiler.err.abs(0).set(
			Strings.format3("exhausted code space for module (%d of %d bytes remaining, need %d)",
				remaining, regionSize, codeSize));

		// Check for any errors
		if (compiler.err.error()) return X86_64Spc.returnCompileFailed(wf, compiler.err);

		// Copy code into end of region
		var entrypoint = code.appendCode(masm);
		Target.setTargetCode(wf.decl, entrypoint);
		return (wf, entrypoint, null);
	}
	def onNewFunction(wf: WasmFunction, err: ErrorGen) {
		X86_64Spc.setLazyCompileFor(wf.decl);
	}
}
// Two tiers: fast-int, frequently-executed functions are compiled with SPC.
class X86_64DynamicStrategy extends X86_64ExecutionStrategy {
	// Called after a module is parsed.
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) {
		installTierUpStubForModule(module, err);
	}
	// Called before a test function is run.
	def onTestRun(wf: WasmFunction, err: ErrorGen) {
		installTierUpStubForModule(wf.instance.module, err);
	}
	// Call a function with arguments and return a result.
	def call(func: Function, args: Array<Value>) -> Result {
		return X86_64Runtime.run(func, args);
	}
	private def installTierUpStubForModule(module: Module, err: ErrorGen) {
		// ensure entrypoint and lazy compile stubs are generated
		X86_64PreGenStubs.gen();
		X86_64Spc.setLazyCompile(null);
		X86_64Spc.setTierUpCompile(tierupCompile);
		// Set all functions to refer to the tier-up compile stub.
		var codeSize = MINIMUM_CODE_SIZE;
		for (i = 0; err.ok() && i < module.functions.length; i++) {
			var f = module.functions[i];
			if (f.imported()) continue;
			X86_64Spc.setTierUpFor(f);
			codeSize += X86_64Spc.estimateCodeSizeFor(f);
		}
		allocateCodeForModule(module, codeSize);
	}
	private def tierupCompile(wf: WasmFunction) -> (WasmFunction, Pointer, Throwable) {
		var module = wf.instance.module;
		var code = module.target_module.spc_code;
		var compiler = newCompiler(module.filename); // XXX: cache per-thread
		var masm = X86_64MacroAssembler.!(compiler.masm), w = masm.asm.w;

		// generate code for the function
// XXX:		w.align(8);
		compiler.gen(module, wf.decl);

		// Check for remaining code space
		var regionSize = code.mapping.range.size();
		var remaining =  regionSize - u64.!(code.codeEnd);
		var codeSize = w.atEnd().pos;
		if (codeSize > remaining) compiler.err.abs(0).set(
			Strings.format3("exhausted code space for module (%d of %d bytes remaining, need %d)",
				remaining, regionSize, codeSize));

		// Check for any errors
		if (compiler.err.error()) return X86_64Spc.returnCompileFailed(wf, compiler.err);

		// Copy code into end of region
		var entrypoint = code.appendCode(masm);
		Target.setTargetCode(wf.decl, entrypoint);
		return (wf, entrypoint, null);
	}
	def onNewFunction(wf: WasmFunction, err: ErrorGen) {
		X86_64Spc.setTierUpFor(wf.decl);
	}
	def onTierUp(wf: WasmFunction, pc: int) -> TargetOsrInfo {
		var module = wf.instance.module;
		var compiler = newCompiler(module.filename);
		var label = compiler.genOsr(module, wf.decl, pc);
		if (label == null) {
			// OSR compile failed
			wf.decl.tierup_trigger = int.max; // no point in trying for a while
			return TargetOsrInfo(Pointer.NULL, null);
		}
		var code = module.target_module.spc_code;
		var masm = X86_64MacroAssembler.!(compiler.masm);
		var entrypoint = code.appendCode(masm);
		var offset = X86_64MasmLabel.!(label).label.pos;
		if (Trace.compiler) Trace.OUT.put3("func[%d].osr_entry (+%d): break *0x%x", wf.decl.func_index, pc, (entrypoint + offset) - Pointer.NULL).outln();
		Target.setTargetCode(wf.decl, entrypoint); 		// TODO: install code into function if it doesn't have it already
		return TargetOsrInfo(entrypoint, List.new((pc, offset), null));
	}
}

def newCompiler(filename: string) -> X86_64SinglePassCompiler {
	var extensions = Extension.set.all; // TODO: all extensions enabled for compilation
	var limits = Limits.new();
	var err = ErrorGen.new(filename);
	var compiler = X86_64SinglePassCompiler.new(extensions, limits, X86_64MasmRegs.CONFIG, err);
	return compiler;
}
def MINIMUM_CODE_SIZE = PAGE_SIZE_i;
def allocateCodeForModule(module: Module, codeSize: int) {
	// Round up to the next page size.
	var codeSize = PAGE_SIZE_i * ((codeSize + PAGE_SIZE_i - 1) / PAGE_SIZE_i);
	// Allocate a read/write/execute mapping for code.
	var mapping = Mmap.reserve(u64.!(codeSize), Mmap.PROT_WRITE | Mmap.PROT_READ | Mmap.PROT_EXEC);
	var code = X86_64SpcModuleCode.new(mapping);
	module.target_module = TargetModule(code);
	RiRuntime.registerUserCode(code);
	code.keepAlive();
	if (Trace.compiler) Trace.OUT.put3("%s: reserved 0x%x ... 0x%x for spc-jit code",
		module.filename, (mapping.range.start - Pointer.NULL), (mapping.range.end - Pointer.NULL)).outln();
}

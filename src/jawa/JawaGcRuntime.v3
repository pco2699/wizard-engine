// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the Jawa runtime using the GC extension to Wasm.
def OUT = Trace.OUT;
def newSig = SigDecl.new(ValueTypes.NO_HEAPTYPES, _, _);

class JawaGcRuntime extends JawaRuntime {
	def arrayReps = HashMap<JawaArrayType, JawaGcRuntimeArrayRep>.new(JawaRefType.hashI32, JawaArrayType.==);
	def classReps = HashMap<JawaClassType, JawaGcRuntimeClassRep>.new(JawaRefType.hashI32, JawaClassType.==);
	def interfaceReps = HashMap<JawaInterfaceType, JawaGcRuntimeInterfaceRep>.new(JawaRefType.hashI32, JawaInterfaceType.==);
	def comodule = Module.new(null);
	def reftypes = Vector<JawaRefType>.new(); // parallel mapping of deftype <-> jawa type
	def coinstance = Instance.new(comodule, []);
	def validator = CodeValidator.new(Jawa.ENGINE_EXTENSIONS, Jawa.ENGINE_LIMITS, comodule, ErrorGen.new(null));
	var iTableStruct: StructDecl;

	var asm = WasmAsm.new();

	new() super(JawaGcStringLens.new(), JawaGcRefTypeClassObjectLens.new()) {
		JawaGcStringLens.!(stringRep).rt = this;
		JawaGcRefTypeClassObjectLens.!(classRep).rt = this;
	}

	def toWasmType(t: JawaType) -> ValueType {
		match (t) {
			x: JawaPrimType => return x.prim.valueType;
			x: JawaArrayType => return makeArrayRep(x).valueType;
			x: JawaClassType => return makeClassRep(x).valueType;
			x: JawaInterfaceType => return makeInterfaceRep(x).valueType;
			_ => return ValueType.Host(t); // XXX: that's an error
		}
	}
	def makeArrayRep(at: JawaArrayType) -> JawaGcRuntimeArrayRep {
		var gcrep = arrayReps[at];
		if (gcrep != null) return gcrep;

		// Build structs before recursing on field/method types
		var parent = JawaLang.OBJECT;
		var pair = newStructs(at, 1, parent.vtable.length),
			objStruct = pair.1, metaStruct = pair.0;

		var array = ArrayDecl.new(ValueTypes.NO_HEAPTYPES, Array.new(1));
		comodule.addDecl(array);
		arrayReps[at] = gcrep = JawaGcRuntimeArrayRep.new(metaStruct, objStruct, array);

		// Finish meta struct
		finishMetaStruct(parent, metaStruct);

		// Finish struct fields
		var field_types = objStruct.field_types;
		var meta_field = StorageType(ValueTypes.RefStruct(false, metaStruct), Packedness.UNPACKED, false);
		var j = 0;
		field_types[j++] = meta_field;
		field_types[j++] = StorageType(ValueTypes.RefArray(false, array), Packedness.UNPACKED, false);

		array.elem_types[0] = toStorageType(at.elem, true);
		return gcrep;
	}
	def makeClassRep(ct: JawaClassType) -> JawaGcRuntimeClassRep {
		var gcrep = classReps[ct];
		if (gcrep != null) return gcrep;
		if (Trace.jawa) OUT.put1("JawaGcRuntime.makeClassRep(%q)", ct.render).outln();

		// Build struct before recursing on field/method types
		var pair = newStructs(ct,
			if(ct.instanceFields != null, ct.instanceFields.length),
			if(ct.vtable != null, ct.vtable.length)), objStruct = pair.1, metaStruct = pair.0;

		classReps[ct] = gcrep = JawaGcRuntimeClassRep.new(metaStruct, objStruct);

		// Finish meta struct
		finishMetaStruct(ct, metaStruct);

		// Build static fields
		var staticFields = ct.staticFields;
		if (staticFields != null && staticFields.length > 0) {
			gcrep.staticFields = Array.new(staticFields.length);
			for (i < staticFields.length) {
				var f = staticFields[i], v = f.defaultValue();
				gcrep.staticFields[i] = addGlobal(toWasmType(f.typ), true, v);
			}
		}

		// Finish field types of struct (recursively)
		var field_types = objStruct.field_types;
		var meta_field = StorageType(ValueTypes.RefStruct(false, metaStruct), Packedness.UNPACKED, false);
		var j = 0;
		field_types[j++] = meta_field;
		if (ct.instanceFields != null) {
			for (f in ct.instanceFields) {
				field_types[j++] = toStorageType(f.typ, true);
			}
		}
		return gcrep;
	}
	def finishMetaStruct(ct: JawaClassType, metaStruct: StructDecl) {
		var jlcrep = makeClassRep(JawaLang.CLASS);
		var meta_field_types = metaStruct.field_types;
		meta_field_types[0] = StorageType(jlcrep.valueType, Packedness.UNPACKED, false);
		meta_field_types[1] = StorageType(ValueTypes.RefStruct(true, makeITableStruct()), Packedness.UNPACKED, false);
		meta_field_types[2] = StorageType(ValueTypes.EXTERNREF, Packedness.UNPACKED, false);
		if (ct.vtable == null) return;
		for (i < ct.vtable.length) {
			var m = ct.vtable[i];
			var receiver = ct;
			if (Trace.jawa) OUT.put2("  vtable[%d] = %q", i, m.render).outln();
			while (true) {  // find the highest parent that defined this method
				var pt = receiver.parent;
				if (pt == null || pt.vtable.length < i) break;
				receiver = pt;
			}
			var sig = m.sig.sig(receiver, toWasmType);
			meta_field_types[META_STRUCT_HEADER_FIELDS + i] = StorageType(
				ValueTypes.RefFunc(false, sig), Packedness.UNPACKED, false);
		}
	}
	def newStructs(rt: JawaRefType, num_fields: int, num_meta_fields: int) -> (StructDecl, StructDecl) {
		// Build struct before recursing on field/method types
		var field_types = Array<StorageType>.new(CLASS_HEADER_FIELDS + num_fields);
		var objStruct = newStruct(rt, field_types);

		// Build meta struct
		var meta_field_types = Array<StorageType>.new(META_STRUCT_HEADER_FIELDS + num_meta_fields);
		var metaStruct = newStruct(null, meta_field_types);

		return (metaStruct, objStruct);
	}
	def makeArrayMetaObject(at: JawaArrayType, gcrep: JawaGcRuntimeHeapRep) -> Value {
		if (gcrep.metaObject.val == null) {
			makeMetaObject0(at, gcrep, JawaLang.OBJECT.vtable, JawaLang.OBJECT.itable);
		}
		return gcrep.metaObject;
	}
	def makeClassMetaObject(ct: JawaClassType, gcrep: JawaGcRuntimeHeapRep) -> Value {
		if (gcrep.metaObject.val == null) {
			makeMetaObject0(ct, gcrep, ct.vtable, ct.itable);
		}
		return gcrep.metaObject;
	}
	def makeInterfaceMetaObject(it: JawaInterfaceType, gcrep: JawaGcRuntimeHeapRep) -> Value {
		if (gcrep.metaObject.val == null) {
			makeMetaObject0(it, gcrep, JawaLang.OBJECT.vtable, JawaLang.OBJECT.itable);
		}
		return gcrep.metaObject;
	}
	def makeMetaObject0(jt: JawaRefType, gcrep: JawaGcRuntimeHeapRep, vtable: Array<JawaMethod>,
			itable: List<(JawaInterfaceType, Array<int>)>) -> Value {
		if (gcrep.metaObject.val != null) return gcrep.metaObject;

		var jlcrep = makeClassRep(JawaLang.CLASS);
		var vals = Array<Value>.new(gcrep.metaStruct.field_types.length);
		gcrep.metaObject = Value.Ref(HeapStruct.new(jlcrep.metaStruct, vals));
		var jlcobj = makeClassMetaObject(JawaLang.CLASS, jlcrep);
		vals[0] = jlcobj;  // all meta-objects have jlc as their metaobject, including itself
		if (vtable != null) for (i < vtable.length) {
			var m = vtable[i];
			vals[META_STRUCT_HEADER_FIELDS + i] = Value.Ref(m.impl);
		}
		// Build a list of interface dispatch tables
		var itable_val: Value.Ref;
		for (l = itable; l != null; l = l.tail) {
			var irep = makeInterfaceRep(l.head.0);
			var vals = Array<Value>.new(irep.itableStruct.field_types.length);
			var istruct = HeapStruct.new(irep.itableStruct, vals);
			vals[0] = itable_val;
			for (j < l.head.1.length) {
				var m = vtable[l.head.1[j]];
				vals[1 + j] = Value.Ref(m.impl);
			}
			itable_val = Value.Ref(istruct);
		}
		vals[1] = itable_val;
		vals[2] = Value.Ref(JawaClassObject.new(jt));
		gcrep.metaObjectGlobal = addGlobal(ValueTypes.RefStruct(false, gcrep.metaStruct), false, gcrep.metaObject);

		return gcrep.metaObject;
	}
	def makeInterfaceRep(it: JawaInterfaceType) -> JawaGcRuntimeInterfaceRep {
		var gcrep = interfaceReps[it];
		if (gcrep != null) return gcrep;

		// Reuse the struct and meta struct representations from jawa/lang/Object, since interfaces do not have fields.
		var parent = JawaLang.OBJECT;
		var jlorep = makeClassRep(parent);
		var metaStruct = jlorep.metaStruct, objStruct = jlorep.objStruct;

		// Build the itable struct before recursing
		var field_types = Array<StorageType>.new(1 + if (it.instanceMethods != null, it.instanceMethods.length));
		var itable = newStruct(it, field_types);
		interfaceReps[it] = gcrep = JawaGcRuntimeInterfaceRep.new(metaStruct, objStruct, itable);

		// Recursively build the itable fields (i.e. method slots).
		field_types[0] = StorageType(ValueTypes.RefStruct(true, makeITableStruct()), Packedness.UNPACKED, false);
		if (it.instanceMethods != null) for (i < it.instanceMethods.length) {
			var m = it.instanceMethods[i];
			var sig = m.sig.sig(parent, toWasmType);
			field_types[1 + i] = StorageType(
				ValueTypes.RefFunc(false, sig), Packedness.UNPACKED, false);
		}
		return gcrep;
	}
	def newStruct(t: JawaRefType, field_types: Array<StorageType>) -> StructDecl {
		var objStruct = StructDecl.new(ValueTypes.NO_HEAPTYPES, field_types); // TODO: supertypes
		comodule.addDecl(objStruct);
		if (t != null) reftypes.set(objStruct.heaptype_index, t);
		return objStruct;
	}
	def makeITableStruct() -> StructDecl {
		if (iTableStruct != null) return iTableStruct;
		iTableStruct = newStruct(null, Array<StorageType>.new(1));
		iTableStruct.field_types[0] = StorageType(
			ValueTypes.RefStruct(true, iTableStruct), Packedness.UNPACKED, false);
		return iTableStruct;
	}
	def toExportedType(t: JawaRefType) -> ExportedType {
		return ExportedValueType.new(t, toWasmType(t));
	}
	def nullRef() -> Value {
		return Values.REF_NULL;
	}
	def newObject(ct: JawaClassType) -> Value {
		var gcrep = makeClassRep(ct);
		var obj = HeapStruct.new(gcrep.objStruct, Array<Value>.new(gcrep.objStruct.field_types.length));
		obj.vals[0] = makeClassMetaObject(ct, gcrep);
		ArrayUtil.copyInto(obj.vals, CLASS_HEADER_FIELDS, ct.boilerplate, 0, ct.boilerplate.length);
		return Value.Ref(obj);
	}
	def getStatic(ct: JawaClassType, f: JawaField) -> Value {
		var gcrep = makeClassRep(ct);
		return coinstance.globals[gcrep.staticFields[f.index].global_index].value;
	}
	def setStatic(ct: JawaClassType, f: JawaField, v: Value) {
		var gcrep = makeClassRep(ct);
		coinstance.globals[gcrep.staticFields[f.index].global_index].value = v;
	}
	def getField(obj: Value, i: int) -> Value {
		var ref = HeapStruct.!(Value.Ref.!(obj).val);
		return ref.vals[i + CLASS_HEADER_FIELDS];
	}
	def setField(obj: Value, i: int, v: Value) {
		var ref = HeapStruct.!(Value.Ref.!(obj).val);
		ref.vals[i + CLASS_HEADER_FIELDS] = v;
	}
	def newArray(at: JawaArrayType, length: int) -> Value {
		var gcrep = makeArrayRep(at);
		var array = HeapArray.new(gcrep.array, Array<Value>.new(length));
		var obj = HeapStruct.new(gcrep.objStruct, Array<Value>.new(gcrep.objStruct.field_types.length));
		obj.vals[0] = makeArrayMetaObject(at, gcrep);
		obj.vals[1] = Value.Ref(array);
		return Value.Ref(obj);
	}
	def initArray<T>(at: JawaArrayType, vals: Array<T>, map: JawaPrimMappingOf<T>) -> Value {
		var gcrep = makeArrayRep(at);
		var vals = Arrays.map(vals, map.box);
		var array = HeapArray.new(gcrep.array, vals);
		var obj = HeapStruct.new(gcrep.objStruct, Array<Value>.new(gcrep.objStruct.field_types.length));
		obj.vals[0] = makeArrayMetaObject(at, gcrep);
		obj.vals[1] = Value.Ref(array);
		return Value.Ref(obj);
	}
	def getElem(arr: Value, i: int) -> Value {
		return toHeapArray(arr).vals[i];
	}
	def setElem(arr: Value, i: int, v: Value) {
		toHeapArray(arr).vals[i] = v;
	}
	def getLength(arr: Value) -> int {
		return toHeapArray(arr).vals.length;
	}
	private def toHeapArray(arr: Value) -> HeapArray {
		var objStruct = HeapStruct.!(Value.Ref.!(arr).val);
		return HeapArray.!(Value.Ref.!(objStruct.vals[ARRAY_STRUCT_ARRAY_FIELD]).val);
	}
	def getJawaType(v: Value) -> JawaType {
		match (v) {
			I32 => return JawaTypes.INT;
			I64 => return JawaTypes.LONG;
			F32 => return JawaTypes.FLOAT;
			F64 => return JawaTypes.DOUBLE;
			Ref(ref) => match (ref) {
				x: HeapStruct => {
					var i = x.decl.heaptype_index;
					if (i <= comodule.heaptypes.length && comodule.heaptypes[i] == x.decl) return reftypes[i];
				}
				x: HeapArray => {
					var i = x.decl.heaptype_index;
					if (i <= comodule.heaptypes.length && comodule.heaptypes[i] == x.decl) return reftypes[i];
				}
			}
			_ => ;
		}
		return null;
	}

	def toStorageType(jt: JawaType, mutable: bool) -> StorageType {
		var packing = Packedness.UNPACKED;
		var vt: ValueType;
		match (jt) {
			x: JawaPrimType => {
				match (x.kind) {
					CHAR, SHORT => packing = Packedness.PACKED_I16;
					BYTE, BOOL => packing = Packedness.PACKED_I8;
					_ => ;
				}
				vt = x.prim.valueType;
			}
			x: JawaArrayType => vt = makeArrayRep(x).valueType;
			x: JawaClassType => vt = makeClassRep(x).valueType;
			x: JawaInterfaceType => vt = makeInterfaceRep(x).valueType;
		}
		return StorageType(vt, packing, mutable);
	}
	def addGlobal(vt: ValueType, mutable: bool, v: Value) -> GlobalDecl {
		var decl = GlobalDecl.new(vt, mutable, InitExpr.Const(v));
		comodule.addDecl(decl);
		// XXX: better management of coinstance globals
		var g = Global.new(vt, decl);
		coinstance.globals = Arrays.append(g, coinstance.globals);
		g.value = v;
		return decl;
	}

//-------------------------------------------------------------------------------------------------
	def AALOAD(at: JawaArrayType) -> WasmFunction {
		var gcrep = makeArrayRep(at);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, ARRAY_STRUCT_ARRAY_FIELD)
			.local_get(1)
			.array_get(gcrep.array);
		return makeFuncP([gcrep.valueType, ValueType.I32], [toWasmType(at.elem)]);
	}
//-------------------------------------------------------------------------------------------------
	def AASTORE(at: JawaArrayType) -> WasmFunction {
		var gcrep = makeArrayRep(at);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, ARRAY_STRUCT_ARRAY_FIELD)
			.local_get(1)
			.local_get(2)
			.array_set(gcrep.array);
		return makeFuncP([gcrep.valueType, ValueType.I32, toWasmType(at.elem)], SigCache.arr_v);
	}
//-------------------------------------------------------------------------------------------------
	def TODO: Function;
	def ACMPEQ() -> Function {
		var gcrep = makeClassRep(JawaLang.OBJECT);
		start0()
			.local_get(0)
			.local_get(1)
			.ref_eq();
		return makeFuncP([gcrep.valueType, gcrep.valueType], SigCache.arr_i);
	}
	def ANEWARRAY(at: JawaArrayType) -> Function {
		return NEWARRAY(at);
	}
	def ARRAYLENGTH(at: JawaArrayType) -> Function {
		var gcrep = makeArrayRep(at);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, ARRAY_STRUCT_ARRAY_FIELD)
			.array_len(gcrep.array);
		return makeFuncP([gcrep.valueType], SigCache.arr_i);
	}
	def NEWARRAY(at: JawaArrayType) -> Function {
		var gcrep = makeArrayRep(at);
		makeArrayMetaObject(at, gcrep);
		start0()
			.global_get(gcrep.metaObjectGlobal.global_index)
			.local_get(0)
			.array_new_canon_default(gcrep.array)
			.struct_new_canon(gcrep.objStruct);
		return makeFuncP(SigCache.arr_i, [gcrep.valueType]);
	}
	def ALOAD<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> Function {
		var gcrep = makeArrayRep(at);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, ARRAY_STRUCT_ARRAY_FIELD)
			.local_get(1);
		match (at.elem.kind) {
			BYTE, SHORT => asm.array_get_s(gcrep.array);
			CHAR, BOOL => asm.array_get_u(gcrep.array);
			_ => asm.array_get(gcrep.array);
		}
		return makeFuncP([gcrep.valueType, ValueType.I32], [toWasmType(at.elem)]);
	}
	def ASTORE<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> Function {
		var gcrep = makeArrayRep(at);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, ARRAY_STRUCT_ARRAY_FIELD)
			.local_get(1)
			.local_get(2)
			.array_set(gcrep.array);
		return makeFuncP([gcrep.valueType, ValueType.I32, toWasmType(at.elem)], SigCache.arr_v);
	}
	def CHECKCAST(t: JawaRefType) -> Function {
		var ot = makeClassRep(JawaLang.OBJECT);
		var result: ValueType;
		match (t) {
			at: JawaArrayType => result = asmClassOrArrayCast(ot, makeArrayRep(at));
			ct: JawaClassType => result = asmClassOrArrayCast(ot, makeClassRep(ct));
			it: JawaInterfaceType => result = asmInterfaceCast(ot, makeInterfaceRep(it));
			_ => return TODO;
		}
		return makeFuncP([ot.valueType], [result]);
	}
	def asmClassOrArrayCast(ot: JawaGcRuntimeClassRep, gcrep: JawaGcRuntimeHeapRep) -> ValueType {
		start0()
			.local_get(0)
			.ref_is_null()
			.if_(gcrep.valueType)
				.ref_null(gcrep.objStruct.heaptype_index)
			.else_()
				.local_get(0)
				.ref_cast(ot.objStruct.heaptype_index, gcrep.objStruct.heaptype_index)
			.end();
		return gcrep.valueType;
	}
	def asmInterfaceCast(ot: JawaGcRuntimeClassRep, gcrep: JawaGcRuntimeInterfaceRep) -> ValueType {
		var itable_struct = makeITableStruct(), itable_type = ValueTypes.RefStruct(true, itable_struct);
		var blockSig = newSig([itable_type], [ValueTypes.RefStruct(false, gcrep.itableStruct)]);
		comodule.addDecl(blockSig);

		start0()
			.block0()
			.block0()
				.local_get(0)
				.br_on_null(0)

			// itable search
			.struct_get(gcrep.objStruct, 0) // read metaobject ptr
			.struct_get(gcrep.metaStruct, 1)  // read itable list
			.blocks(blockSig)
				.loops(blockSig)
					.br_on_null(3) // fell off list, fail
					.br_on_cast(1, itable_struct.heaptype_index, gcrep.itableStruct.heaptype_index)
					.struct_get(itable_struct, 0) // read next link in itable list
					.br(0) // continue
				.end()
			.end()
			.drop() // drop the successfully casted itable
			.end()
			// success
			.local_get(0) // cast succeeded
			.ret()
			.end()

			// fail
			.ref_null(gcrep.objStruct.heaptype_index) // XXX: relying on failing cast of null
			.ref_cast(ot.objStruct.heaptype_index, gcrep.objStruct.heaptype_index);
		return gcrep.valueType;
	}
	def DCMPG() -> Function {
		return xCMPy(Opcode.F64_GT, Opcode.F64_EQ, SigCache.dd_i);
	}
	def DCMPL() -> Function {
		return xCMPy(Opcode.F64_LT, Opcode.F64_EQ, SigCache.dd_i);
	}
	def DREM() -> Function { return TODO; }
	def FCMPG() -> Function {
		return xCMPy(Opcode.F32_GT, Opcode.F32_EQ, SigCache.ff_i);
	}
	def FCMPL() -> Function {
		return xCMPy(Opcode.F32_GT, Opcode.F32_EQ, SigCache.ff_i);
	}
	def FREM() -> Function { return TODO; }
	private def xCMPy(cmp: Opcode, eq: Opcode, sig: SigDecl) -> Function {
		start0()  // XXX: spell out code as a byte array?
			.local_get(0)
			.local_get(1)
			.op(cmp)
			.if_(ValueType.I32)
				.i32const(1)
			.else_()
				.local_get(0)
				.local_get(1)
				.op(eq)
			.end()
			.i32const(1)
			.op(Opcode.I32_SUB);
		return makeFuncS(sig);
	}
	def GETFIELD(ct: JawaClassType, f: JawaField) -> Function {
		var gcrep = makeClassRep(ct);
		start0()
			.local_get(0);
		var index = f.index + CLASS_HEADER_FIELDS;
		match (f.typ.kind) {
			BYTE, SHORT => asm.struct_get_s(gcrep.objStruct, index);
			CHAR, BOOL => asm.struct_get_u(gcrep.objStruct, index);
			_ => asm.struct_get(gcrep.objStruct, index);
		}
		return makeFuncP([gcrep.valueType], [toWasmType(f.typ)]);
	}
	def GETSTATIC(ct: JawaClassType, f: JawaField) -> Function {
		var gcrep = makeClassRep(ct);
		start0()
			.global_get(gcrep.staticFields[f.index].global_index);
		return makeFuncP(SigCache.arr_v, [toWasmType(f.typ)]);
	}
	def INSTANCEOF(t: JawaRefType) -> Function {
		var ot = makeClassRep(JawaLang.OBJECT);
		match (t) {
			at: JawaArrayType => asmClassOrArrayInstanceOf(ot, makeArrayRep(at));
			ct: JawaClassType => asmClassOrArrayInstanceOf(ot, makeClassRep(ct));
			it: JawaInterfaceType => asmInterfaceInstanceOf(ot, makeInterfaceRep(it));
		}
		return makeFuncP([ot.valueType], SigCache.arr_i);
	}
	def asmClassOrArrayInstanceOf(ot: JawaGcRuntimeClassRep, gcrep: JawaGcRuntimeHeapRep) {
		start0()
			.local_get(0)
			.ref_test(ot.objStruct.heaptype_index, gcrep.objStruct.heaptype_index);
	}
	def asmInterfaceInstanceOf(ot: JawaGcRuntimeClassRep, gcrep: JawaGcRuntimeInterfaceRep) {
		var itable_struct = makeITableStruct(), itable_type = ValueTypes.RefStruct(true, itable_struct);
		var blockSig = newSig([itable_type], [ValueTypes.RefStruct(false, gcrep.itableStruct)]);
		comodule.addDecl(blockSig);

		start0()
			.block0()
			.block0()
				.local_get(0)
				.br_on_null(1)

			// itable search
			.struct_get(gcrep.objStruct, 0) // read metaobject ptr
			.struct_get(gcrep.metaStruct, 1)  // read itable list
			.blocks(blockSig)
				.loops(blockSig)
					.br_on_null(3) // fell off list, fail
					.br_on_cast(1, itable_struct.heaptype_index, gcrep.itableStruct.heaptype_index)
					.struct_get(itable_struct, 0) // read next link in itable list
					.br(0) // continue
				.end()
			.end()
			.drop() // drop the successfully casted itable
			.end()
			// success
			.i32const(1) // instanceof true
			.ret()
			.end()

			// instanceof false
			.i32const(0);
	}
	def INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod) -> Function {
		var gcrep = makeInterfaceRep(it);
		start0().local_get(0);  // load receiver and all args
		for (i < m.sig.params.length) asm.local_get(1 + i);
		var itable_struct = makeITableStruct(), itable_type = ValueTypes.RefStruct(true, itable_struct);
		var blockSig = newSig([itable_type], [ValueTypes.RefStruct(false, gcrep.itableStruct)]);
		comodule.addDecl(blockSig);
		asm.local_get(0) // load receiver for itable lookup
			.struct_get(gcrep.objStruct, 0) // read metaobject ptr
			.struct_get(gcrep.metaStruct, 1)  // read itable list
			.blocks(blockSig)
				.loops(blockSig)
					.br_on_cast(1, itable_struct.heaptype_index, gcrep.itableStruct.heaptype_index)
					.struct_get(itable_struct, 0) // read next link in itable list
					.br(0) // continue
				.end()
			.end()
			.struct_get(gcrep.itableStruct, 1 + m.itable_index) // load method ref
			.return_call_ref();
		return makeFuncS(m.sig.sig(it, toWasmType));
	}
	def INVOKESPECIAL(ct: JawaClassType, m: JawaMethod) -> Function {
		var gcrep = makeClassRep(JawaLang.OBJECT);
		start0()
			.local_get(0)
			.ref_as_non_null();
		for (i < m.sig.params.length) asm.local_get(i + 1);
		var funcSig = m.sig.sig(ct, toWasmType);
		var g = addGlobal(ValueTypes.RefFunc(false, funcSig), false, Value.Ref(m.impl)); // XXX: cache impl ref?
		asm.global_get(g.global_index);
		asm.return_call_ref();
		return makeFuncS(funcSig);
	}
	def INVOKESTATIC(ct: JawaClassType, m: JawaMethod) -> Function {
		return m.impl;
	}
	def INVOKEVIRTUAL(ct: JawaClassType, m: JawaMethod) -> Function {
		var gcrep = makeClassRep(ct);
		start0().local_get(0);
		for (i < m.sig.params.length) asm.local_get(1 + i);
		asm
			.local_get(0)
			.struct_get(gcrep.objStruct, 0)
			.struct_get(gcrep.metaStruct, META_STRUCT_HEADER_FIELDS + m.vtable_index)
			.return_call_ref();
		return makeFuncS(m.sig.sig(ct, toWasmType));
	}
	def ISNULL() -> Function {
		var gcrep = makeClassRep(JawaLang.OBJECT);
		start0()
			.local_get(0)
			.ref_is_null();
		return makeFuncP([gcrep.valueType], SigCache.arr_i);
	}
	def MONITORENTER() -> Function {
		var gcrep = makeClassRep(JawaLang.OBJECT);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, 0)  // trap on null
			.drop();
		return makeFuncP([gcrep.valueType], SigCache.arr_v);
	}
	def MONITOREXIT() -> Function {
		var gcrep = makeClassRep(JawaLang.OBJECT);
		start0()
			.local_get(0)
			.struct_get(gcrep.objStruct, 0)  // trap on null
			.drop();
		return makeFuncP([gcrep.valueType], SigCache.arr_v);
	}
	def MULTIANEWARRAY(dims: int, at: JawaArrayType) -> Function {
		start();
		var tmps = Array<int>.new(dims - 1);
		asm.put_u32leb(dims - 1);
		var ct = at;
		for (i < dims - 1) {  // allocate temporary variables for intermediate arrays
			asm.put(1);
			var gcrep = makeArrayRep(ct);
			asm.put_blockType(ValueTypes.RefArray(true, gcrep.array));
			tmps[i] = dims + i;
			ct = JawaArrayType.!(ct.elem);
		}
		recursiveMakeArray(dims, at, tmps, 0);
		var params = Array<ValueType>.new(dims);
		for (i < dims) params[i] = ValueType.I32;
		return makeFuncP(params, [toWasmType(at)]);
	}
	def recursiveMakeArray(dims: int, at: JawaArrayType, tmps: Array<int>, pos: int) {
		var gcrep = makeArrayRep(at);
		makeArrayMetaObject(at, gcrep);
		// allocate array elements
		var cnt_local = pos;
		asm
		.global_get(gcrep.metaObjectGlobal.global_index)
		.local_get(cnt_local)
		.array_new_canon_default(gcrep.array);

		if (pos != dims - 1) {
			// recursively allocate and initialize elements
			asm
			.local_set(tmps[pos])
			.loop0()
			.local_get(cnt_local)
			.if0()
				.local_get(tmps[pos])
				.local_get(cnt_local)
				.i32const(1)
				.op(Opcode.I32_SUB)
				.local_tee(cnt_local);

			recursiveMakeArray(dims, JawaArrayType.!(at.elem), tmps, pos + 1);

			asm
				.array_set(gcrep.array)
				.br(1)
			.end()
			.end()
			.local_get(tmps[cnt_local])
			.ref_as_non_null();
		}
		// allocate array object
		asm
		.struct_new_canon(gcrep.objStruct);
	}
	def NEW(ct: JawaClassType) -> Function {
		var gcrep = makeClassRep(ct);
		makeClassMetaObject(ct, gcrep);
		// Declare globals that contain default values for fields
		start().put_u32leb(gcrep.objStruct.field_types.length - 1); // # locals
		for (i = 1; i < gcrep.objStruct.field_types.length; i++) {
			asm.locals(1, gcrep.objStruct.field_types[i].valtype);
		}
		// Load the meta object
		asm.global_get(gcrep.metaObjectGlobal.global_index);
		for (i = 1; i < gcrep.objStruct.field_types.length; i++) {
			asm.local_get(i - 1);
		}
		asm.struct_new_canon(gcrep.objStruct);
		return makeFuncP(SigCache.arr_v, [gcrep.valueType]);
	}
	def PUTFIELD(ct: JawaClassType, f: JawaField) -> Function {
		var gcrep = makeClassRep(ct);
		start0()
			.local_get(0)
			.local_get(1)
			.struct_set(gcrep.objStruct, f.index + CLASS_HEADER_FIELDS);
		return makeFuncP([gcrep.valueType, toWasmType(f.typ)], SigCache.arr_v);
	}
	def PUTSTATIC(ct: JawaClassType, f: JawaField) -> Function {
		var gcrep = makeClassRep(ct);
		start0()
			.local_get(0)
			.global_set(gcrep.staticFields[f.index].global_index);
		return makeFuncP([toWasmType(f.typ)], SigCache.arr_v);
	}

//-------------------------------------------------------------------------------------------------
	def start0() -> WasmAsm {
		return asm.resize(0)
			.put(0 /*locals*/);
	}
	def start() -> WasmAsm {
		return asm.resize(0);
	}
	def makeFuncP(params: Array<ValueType>, results: Array<ValueType>) -> WasmFunction {
		return makeFuncS(newSig(params, results));
	}
	def makeFuncS(sig: SigDecl) -> WasmFunction {
		comodule.addDecl(sig);
		var func = FuncDecl.new(sig.heaptype_index);
		func.setOrigCode(asm.put(Opcode.END.code).extract());
		comodule.addDecl(func);
		var f = WasmFunction.new(coinstance, func);
		var r = validator.validateFunc(f.decl);
		Execute.tiering.onFuncValidationFinish(comodule, u32.!(func.func_index), validator.err);
		match (r) {
			Error(error, pc, msg) => {
				System.error("JawaGcRuntimeError", Strings.format2("stub validation failed @ +%d: %s", pc, msg));
			}
			_ => ;
		}
		return f;
	}
}

def CLASS_META_FIELD = 0;
def CLASS_HEADER_FIELDS = 1;
def META_STRUCT_HEADER_FIELDS = 3;
def ARRAY_STRUCT_ARRAY_FIELD = 1;

class JawaGcStringLens extends JawaWasmLens<JawaString, Value> {
	var rt: JawaGcRuntime;
	def toWasm(s: JawaString) -> Value {
		return Values.REF_NULL; // TODO
	}
	def fromWasm(v: Value) -> JawaString {
		return null; // TODO
	}
}
class JawaGcRefTypeClassObjectLens extends JawaWasmLens<JawaRefType, Value> {
	var rt: JawaGcRuntime;
	def toWasm(t: JawaRefType) -> Value {
		var gcrep: JawaGcRuntimeHeapRep;
		match (t) {
			at: JawaArrayType => {
				gcrep = rt.makeArrayRep(at);
				rt.makeArrayMetaObject(at, gcrep);
			}
			ct: JawaClassType => {
				gcrep = rt.makeClassRep(ct);
				rt.makeClassMetaObject(ct, gcrep);
			}
			it: JawaInterfaceType => {
				gcrep = rt.makeInterfaceRep(it);
				rt.makeInterfaceMetaObject(it, gcrep);
			}
		}
		return gcrep.metaObject;
	}
	def fromWasm(v: Value) -> JawaRefType {
		var st = HeapStruct.!(Value.Ref.!(v).val);
		var jt = JawaClassObject.!(Value.Ref.!(st.vals[2]).val);
		return jt.rep;
	}
}

class JawaGcRuntimeHeapRep(metaStruct: StructDecl, objStruct: StructDecl) {
	var metaObject: Value.Ref;
	var metaObjectGlobal: GlobalDecl;
	def valueType = ValueTypes.RefStruct(true, objStruct);
}

class JawaGcRuntimeArrayRep extends JawaGcRuntimeHeapRep {
	def array: ArrayDecl;

	new(metaStruct: StructDecl, objStruct: StructDecl, array) super(metaStruct, objStruct) { }
}

class JawaGcRuntimeClassRep extends JawaGcRuntimeHeapRep {
	var staticFields: Array<GlobalDecl>;

	new(metaStruct: StructDecl, objStruct: StructDecl) super(metaStruct, objStruct) { }
}

class JawaGcRuntimeInterfaceRep  extends JawaGcRuntimeHeapRep {
	def itableStruct: StructDecl;

	new(metaStruct: StructDecl, objStruct: StructDecl, itableStruct) super(metaStruct, objStruct) { }
}

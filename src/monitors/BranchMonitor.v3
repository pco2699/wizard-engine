// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class BmEntry(func: FuncDecl, pc: int, op: Opcode, numTargets: int) {
	// for BR_IF, [0] = not taken and [1] = taken
	// for IF, [0] = else branch, [1] = then branch
	def taken = Array<u64>.new(numTargets);
}

class BranchMonitorState(module: Module) extends BytecodeVisitor {
	def entries = Vector<BmEntry>.new();
	var bi: BytecodeIterator;

	def visit_IF(btc: BlockTypeCode) {
		addBranchInfo(Opcode.IF, 2, false);
	}
	def visit_BR_IF(depth: u31) {
		addBranchInfo(Opcode.BR_IF, 2, false);
	}
	def visit_BR_TABLE(labels: Range<u31>) {
		addBranchInfo(Opcode.BR_TABLE, labels.length, true);
	}

	private def addBranchInfo(opcode: Opcode, numTargets: int, isBrTable: bool) {
		var f = bi.func;
		var entry = BmEntry.new(f, bi.pc, opcode, numTargets);
		entries.put(entry);

		var probe = if(isBrTable, BranchMonitorBranchTableProbe.new(entry.taken), BranchMonitorProbe.new(entry.taken));
		module.insertProbeAt(f.func_index, bi.pc, probe);
	}
	def report() {
		var prev: FuncDecl;
		for (i < entries.length) {
			var e = entries[i];
			if (e.func != prev) {
				prev = e.func;
				Trace.OUT.put1("func %q:", prev.render(module.names, _)).outln();
			}
			Trace.OUT.put1("  +%d ", e.pc);
			Opcodes.render(Trace.OUT, e.op.code);
			Trace.OUT.puts(": ");
			Trace.OUT.putc('[');
			var taken = e.taken;
			for (j < taken.length) {
				if (j > 0) Trace.OUT.csp();
				Trace.OUT.putd(taken[j]);
			}
			Trace.OUT.putc(']');
			Trace.OUT.outln();
		}
	}
}

class BranchMonitor extends Monitor {
	def visitors = Vector<BranchMonitorState>.new();

	def onParse(module: Module) {
		def visitor = BranchMonitorState.new(module);
		visitors.put(visitor);

		var it = BytecodeIterator.new();
		visitor.bi = it;

		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imp != null) continue;
			
			var bi = it.reset(f);
			while (bi.more()) {
				bi.dispatch(visitor);
				bi.next();
			}
		}
	}
	def onFinish(i: Instance) {
		for (j < visitors.length) {
			visitors[j].report();
		}
	}
}

class BranchMonitorProbe(taken: Array<u64>) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var condition = accessor.getOperand(0);
		var taken = Values.v_i(condition) != 0;
		var index = if(taken, 1, 0);
		this.taken[index] += 1;
		return Resumption.Continue;
	}
}
class BranchMonitorBranchTableProbe(taken: Array<u64>) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var numBranches = taken.length;
		var condition = accessor.getOperand(0);
		var takenBranch = Values.v_i(condition);
		if (takenBranch >= numBranches) {
			takenBranch = numBranches - 1;
		}
		this.taken[takenBranch] += 1;
		return Resumption.Continue;
	}
}
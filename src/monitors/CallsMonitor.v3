// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints each call as it happens and also keeps statistics.
class CallsMonitor extends Monitor {
	def entries = Vector<(Module, FuncDecl)>.new();
	def counts = Vector<u64>.new();
	var depth = 0;
	var filter: DeclFilter;

	def configure(args: string) -> string {
		filter = DeclFilter.new(args);
		return null;
	}
	def onParse(module: Module) {
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (filter != null && !filter.matches(module, f)) continue;
			if (f.imp != null) continue; // skip imported functions
			var callProbe = CallsMonitorEnterProbe.new(this);
			var retProbe = CallsMonitorExitProbe.new(this);

			module.insertProbeAtFuncEnterExit(i, callProbe, retProbe);
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
	}
}
class CallsMonitorEnterProbe(m: CallsMonitor) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		for (i < m.depth) Trace.OUT.puts("  ");
		m.depth++;
		dynamicLoc.func.render(Trace.OUT);
		Trace.OUT.outln();
		return Resumption.Continue;
	}
}
class CallsMonitorExitProbe(m: CallsMonitor) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		m.depth--;
		return Resumption.Continue;
	}
}
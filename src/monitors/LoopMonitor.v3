// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the number of iterations of each loop.
class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) {
	var endPc: int;
}

class LoopMonitor extends Monitor {
	def entries = Vector<LmEntry>.new();
	def counts = Vector<u64>.new();

	def onParse(m: Module) {
		var it = BytecodeIterator.new();

		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions

			var loopDepth = 0;
			var controlStack = ArrayStack<(Opcode, LmEntry)>.new();

			for (bi = it.reset(f); bi.more(); bi.next()) {
				var op = bi.current();
				match (op) {
					BLOCK, IF => controlStack.push((op, null));
					LOOP => {
						var probe = LoopMonitorCounter.new(this, entries.length);
						m.insertProbeAt(f.func_index, bi.pc, probe);
						var lmEntry = LmEntry.new(m, f, loopDepth, bi.pc);
						entries.put(lmEntry);
						controlStack.push((op, lmEntry));
						counts.put(0);
						loopDepth++;
					}
					// TODO: try and exception bytecodes 
					END => {
						if ((bi.pc + 1) < f.cur_bytecode.length) {
							var topControl = controlStack.pop();
							if (topControl.0 == Opcode.LOOP) {
								loopDepth--;
								topControl.1.endPc = bi.pc;
							}
						}
					}
					_ => ;
				}

			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		for (j < entries.length) {
			var e = entries[j];
			if (e.func != prev) {
				prev = e.func;
				Trace.OUT.put1("func %q:", prev.render(e.module.names, _)).outln();
			}
			for (k < e.depth) Trace.OUT.puts("  ");
			Trace.OUT.put3("  +%d ... +%d loop: %d", e.pc, e.endPc, counts[j]).outln();
		}
	}
}
class LoopMonitorCounter(m: LoopMonitor, entry: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		m.counts[entry] = 1u + m.counts[entry];
		return Resumption.Continue;
	}
}
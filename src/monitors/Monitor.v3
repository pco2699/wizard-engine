// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A monitor provides visibility into the execution of Wasm program by instrumenting code
// and/or events that occur while it is running, such as by tracing or collecting statistics
// that are reported upon program finish.
class Monitor {
	// Configure the monitor based on additional arguments supplied on the command line.
	// If any syntax errors are detected in the arguments, this method should return a
	// non-null message to be reported to the user.
	def configure(args: string) -> string {
		return null;
	}
	// Called by the engine after a module is successfully parsed. A monitor may insert
	// instrumentation into the module that will be apply to all instances of the module.
	def onParse(m: Module) {
	}
	// Called by the engine during instantiation when a binding is supplied for an import
	// to a module. A monitor may interpose on the binding (e.g. by wrapping an imported
	// call).
	def onBind(m: Module, d: Decl, e: Exportable) -> Exportable {
		return e;
	}
	// Called by the engine after a module is successfully instantiated. A monitor may
	// insert instrumentation specific to the instance, e.g. on the exports.
	def onInstantiate(i: Instance) {
	}
	// Called by the engine before an instance is started.
	def onStart(f: Function) {
	}
	// Called by the engine before the main method, if any, is called.
	def onMain(f: Function, args: Array<Value>) {
	}
	// Called by the engine after the instance has finished executing, e.g. to print
	// a report.
	def onFinish(i: Instance) {
	}
	// Called by the engine on process exit.
	def onExit(code: int) {
	}
}

type DynamicLoc(wf: WasmFunction: pc: int, frame: TargetFrame) #unboxed;

type Event {
	// Engine
	case ActivateMode(strategy: ExecutionStrategy);

	// Parsing/validation
	case BeforeValidate(module: Module, func: FuncDecl);
	case AfterValidate(module: Module, func: FuncDecl);
	case BeforeParse(bytes: Range<byte>);
	case AfterParse(module: Module);
	case AfterInstantiate(instance: Instance);

	// Internal performance (normally invisible)
/*@*/	case Compile(module: Module, func: FuncDecl);
/*@*/	case BeforeGC();
/*@*/	case AfterGC();

	// Memory-related events
/*E*/	case BeforeReadMem(loc: DynamicLoc, memory: Memory, index: u64, size: u64);
/*E*/	case BeforeGrowMem(loc: DynamicLoc, memory: Memory, pages: u64);
/*E*/	case BeforeWriteMem(loc: DynamicLoc, memory: Memory, index: u64, size: u64);

	// Table-related events
/*?*/	case BeforeReadTable(loc: DynamicLoc, table: Table, index: u64);
/*?*/	case BeforeWriteTable(loc: DynamicLoc, table: Table, index: u64);

	// Global-variable-related events
/*E*/	case BeforeReadGlobal(loc: DynamicLoc, global: Global);
/*E*/	case BeforeWriteGlobal(loc: DynamicLoc, global: Global);

	// Synchronous execution-related events
	case BeforeStart(loc: DynamicLoc);
	case BeforeMain(wf: WasmFunction, frame: TargetFrame);
	case BeforeInstr(loc: DynamicLoc);
/*?*/	case AfterInstr(loc: DynamicLoc);
/*E*/	case BeforeCall(wf: WasmFunction, frame: TargetFrame);
/*E*/	case BeforeReturn(loc: DynamicLoc);
/*@*/	case BeforeUnwind(loc: DynamicLoc);
/*@*/	case BeforeTrap(reason: TrapReason, loc: DynamicLoc);
/*E*/	case BeforeThrow(loc: DynamicLoc, t: Throwable);
/*E*/	case BeforeRethrow(loc: DynamicLoc, t: Throwable);
/*E*/	case BeforeCatch(loc: DynamicLoc, t: Throwable);
/*@*/	case BeforeCallImport(instance: Instance, func_index: int);
/*@*/	case AfterCallImport(instance: Instance, func_index: int);

	// Global engine-related events
	case Exit(code: int);
}

class Mirror {
	def getFrameAccessor(frame: TargetFrame) -> FrameAccessor;
	// all public fields of instance
	// all public fields of module
	// JITed code of a function
	// execution tier of a function (int, spc, opt)
}

// Debugger use cases
// enumerate local variables and the stack
// next
// break (conditional, tracing)
// watchpoint
// step
// step into
// step out
// get a stack trace (frame accessor and a loop)
// call into a function (esp. export)
// evaluate an expression
// add printf-tracing

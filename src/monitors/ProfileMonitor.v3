// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A tree-based profiler
class ProfileTreeNode(parent: ProfileTreeNode, func: WasmFunction) {
	var children: List<ProfileTreeNode>;
	var totalTime: int;
	var curTime: int;
	var count: int;
	
	def getOrCreateChild(func: WasmFunction) -> ProfileTreeNode {
		for (i = children; i != null; i = i.tail) {
			if (i.head.func == func) return i.head;
		}
		var childNode = ProfileTreeNode.new(this, func);
		children = List.new(childNode, children);
		return childNode;
	}
	def enter() {
		curTime = System.ticksUs();
		count++;
	}
	def exit() {
		totalTime += System.ticksUs() - curTime;
	}

	def render(out: TraceBuilder, depth: int, total: int, maxDepth: int) {
		var totalPercentTime = if(depth == 1, totalTime, total);
		var nestedTime: int = totalTime;
		var selfTime: int = totalTime;

		var childArray = Lists.toArray(children);
		childArray = Arrays.sort(childArray, 0, childArray.length, byTime);

		if (maxDepth == -1 || depth < maxDepth) {
			var childTotalTime = 0;
			for (i < childArray.length) {
				childTotalTime += childArray[i].totalTime;
			}
			selfTime = nestedTime - childTotalTime;
		} else {
			selfTime = -1;
		}
		
		if (func == null) {
			// Root node in ProfileTree
			renderHeader(out);
		} else {
			var l = out.length;
			var f = func.decl;
			for (i < depth) out.puts("  ");
			out.puts(TermColors.CYAN);
			out.puts("func ");
			f.render(func.instance.module.names, out);
			out.puts(TermColors.DEFAULT);
			out.pad(' ', l + 50);
			out.rjustify(' ', TraceUtil.renderUs(out, nestedTime), 12);
			out.rjustify(' ', TraceUtil.renderUs(out, selfTime), 12);
			if (totalPercentTime == 0) out.rjustify(' ', TraceUtil.renderPercent(out, 0, 1, 3), 10);
			else out.rjustify(' ', TraceUtil.renderPercent(out, selfTime, totalPercentTime, 3), 10);
			out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.putd(_, count)), 10);
			out.outln();
		}

		if (maxDepth == -1 || depth < maxDepth) {
			for (child in childArray) {
				if (child != null) child.render(out, depth + 1, totalPercentTime, maxDepth);
			}
		}
	}
	private def byTime(a: ProfileTreeNode, b: ProfileTreeNode) -> bool {
		return b.totalTime < a.totalTime;
	}

	private def renderHeader(out: TraceBuilder) {
		var l = out.length;
		out.puts(TermColors.CYAN);
		out.puts("*");
		out.puts(TermColors.DEFAULT);
		out.pad(' ', l + 50);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "nested")), 12);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "self")), 12);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "self %")), 10);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "count")), 10);
		out.outln();
	}
}

class ProfileTree {
	var rootNode: ProfileTreeNode;
	var curNode: ProfileTreeNode;

	new() {
		rootNode = ProfileTreeNode.new(null, null);
		curNode = rootNode;
	}
	def enterFunc(func: WasmFunction) {
		curNode = curNode.getOrCreateChild(func);
		curNode.enter();
	}
	def exitFunc() {
		curNode.exit();
		curNode = curNode.parent;
	}
}

class ProfileMonitor extends Monitor {
	var tree: ProfileTree;
	var maxDepth: int = -1;
	var filter: DeclFilter;

	// format: --monitors=profile{depth=2,calls=*}
	def configure(args: string) -> string {
		var argNameStart: int;
		for (i = 0; i < args.length; i++) {
			if (args[i] == '=') {
				var argName = Arrays.range(args, argNameStart, i);
				var argValueStart = i;
				while (i < args.length && args[i] != ',') i++;
				var argValue = Arrays.range(args, argValueStart + 1, i);
				handleArg(argName, argValue);
				argNameStart = i + 1;
			}
		}
		return null;
	}
	private def handleArg(name: string, value: string) {
		if (Strings.equal(name, "depth")) {
			maxDepth = Ints.parseDecimal(value, 0).1;
		} else if (Strings.equal(name, "calls")) {
			filter = DeclFilter.new(value);
		}
	}
	def onParse(module: Module) {
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imp != null) continue; // skip imported functions
			if (filter != null && !filter.matches(module, f)) continue;
			var enterProbe = ProfileMonitorEnterProbe.new(this);
			var exitProbe = ProfileMonitorExitProbe.new(this);

			module.insertProbeAtFuncEnterExit(i, enterProbe, exitProbe);
		}
		tree = ProfileTree.new();
	}
	def onExit(code: int) {
		while (tree.curNode != null) tree.exitFunc();
		onFinish(null);
	}
	def onFinish(i: Instance) {
		tree.rootNode.render(Trace.OUT, 0, 0, maxDepth);
	}
}
class ProfileMonitorEnterProbe(m: ProfileMonitor) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		m.tree.enterFunc(dynamicLoc.func);
		return Resumption.Continue;
	}
}
class ProfileMonitorExitProbe(m: ProfileMonitor) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		m.tree.exitFunc();
		return Resumption.Continue;
	}
}
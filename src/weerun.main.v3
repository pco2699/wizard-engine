// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wee.wasm files.
def main(args: Array<string>) -> int {
	var engine = Engine.new();
	var programArgs: Array<string>;
	var path: string;
	// Parse option and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (a.length > 0 && a[0] == '-') {
			var ok = TraceOptions.parse(a);

			if (!ok) return ErrorBuilder.new()
				.puts("weerun: unrecognized option ")
				.putsq(a)
				.ln()
				.exit(1);
		} else {
			path = a;
			programArgs = Arrays.range(args, i, args.length);
			break;
		}
	}

	if (path == null) return ErrorBuilder.new()
		.puts("weerun: no input files\n")
		.exit(3);

	if (!Strings.endsWith(path, ".wasm")) return ErrorBuilder.new()
		.puts(path)
		.puts(": unknown file format, expected .wasm\n")
		.exit(4);

	// Parse the binary module
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => module = m;
		FileNotFound => return ErrorBuilder.new()
			.puts("weerun: could not load file ")
			.puts(path)
			.ln()
			.exit(2);
		ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, section, error_index, error_pos, error_msg)
			.exit(3);
	}

	// Compile the list of import processors
	var err = ErrorGen.new(path);
	var imports = Array<Exportable>.new(module.imports.length);
	var i = Instantiator.new(engine.extensions, module, imports, err);
	var map = Strings.newMap<ImportProcessor>();

	for (j < module.imports.length) {
		var imp = module.imports[j].imp;
		if (!Strings.equal("weewasm", imp.module_name)) continue;
		if (Strings.equal("puti", imp.field_name)) {
			continue; // TODO
		}
		if (Strings.equal("puts", imp.field_name)) {
			continue; // TODO
		}
		if (Strings.equal("putd", imp.field_name)) {
			continue; // TODO
		}
	}

	// Add tracing to the interpreter if necessary.
	if (Trace.interpreter && !Target.hasBuiltinInterpreterTracing()) Execute.probes.add(TraceProbe.new());

	// Compile the module if necessary.
	Execute.finishModule(module, err);

	// Run the instantiatior.
	var instance = i.run();
	if (!err.ok()) return ErrorBuilder.new()
		.render(err.error_code, path, err.section, err.error_index, err.error_pos, err.error_msg)
		.exit(6);

	// Try to find the main entrypoint.
	var entry = findDefaultMain(instance);

	if (entry.0 == null) return ErrorBuilder.new()
		.puts(path)
		.puts(": no main export from module\n")
		.exit(7);

	// Execute the start function, if any.
	if (module.start_function >= 0) {
		var start = instance.functions[module.start_function];
		var r = Execute.call(start, Values.NONE);
		match (r) {
			Trap(reason) => return exitTrap(instance, reason);
			_ => ; // do nothing
		}
	}

	// Execute the main entrypoint.
	var r = Execute.call(entry.0, entry.1);
	match (r) {
		Break => ;
		Value(vals) => {
			if (vals.length != 1) return 0;
			match (vals[0]) {
				I32(val) => return int.view(val);
				F64(val) => return int.view(val); // TODO: print
				Ref(obj) => return 1; // TODO: print
				_ => return 0;
			}
		}
		Trap(reason) => {
			return exitTrap(instance, reason);
		}
	}
	return 0;
}
def exitTrap(instance: Instance, reason: TrapReason) -> int {
	if (reason == TrapReason.EXIT) {
		return Execute.exit_code;
	} else {
		var e = ErrorBuilder.new()
			.puts("!trap")
			.ln();
		return e.exit(10);
	}
}

class TraceProbe extends Probe {
	def tracer = InstrTracer.new();
	def d = DataReader.new([]);

	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var func = dynamicLoc.func;
		var offset = dynamicLoc.offset;
		d.reset(func.decl.code.orig, offset, func.decl.code.orig.length);
		var module = if(func.instance != null, func.instance.module);
		var out = Trace.OUT;
		var len = out.length;
		out.pad(' ', len + Execute.getCallDepth());
		out.putc('+').putd(offset).puts(": ");
		tracer.putInstr(out, module, d);
		out.outln();
		return Resumption.Continue;
	}
}

def findDefaultMain(instance: Instance) -> (Function, Array<Value>) {
	var module = instance.module;
	var exports = module.exports;
	var found: Function;
	for (j < exports.length) {
		var mex = module.exports[j], iex = instance.exports[j];
		if (!Function.?(iex)) continue;
		found = Function.!(iex);
		if (Strings.equal("main", mex.0)) {
			return (found, Arrays.map(found.sig.params, Values.default));
		}
	}
	return (null, null);
}
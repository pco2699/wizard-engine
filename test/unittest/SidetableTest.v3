// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("sidetable:", _, SidetableTester.new, _);
def X = [
	T("raw1", test_raw1),
	T("raw2", test_raw2),
	T("br0", test_br0),
	T("br1", test_br1),
	T("brN", test_brN),
	T("if0", test_if0),
	T("relative", test_relative),
	T("br_table0", test_br_table0),
	T("br_loop_val", test_br_loop_val),
	()
];

class SidetableTester(t: Tester) extends ModuleBuilder {
	def codev(raw: Array<byte>) -> this {
		code(raw);
		var r = v().validateFunc(func);
		match (r) {
			Ok => ;
			Error(error, pc, msg) => t.fail2("invalid code @+%d: %s", pc, msg);
		}
		if (Trace.validation) dump();
	}
	def dump() {
		var x = func.sidetable;
		if (x == null) {
			System.puts("0 sidetable entries\n");
			return;
		}
		var buf = StringBuilder.new();
		buf.put1("%d sidetable entries:\n", x.length / 4);
		for (i = 0; i < x.length; i += 4) {
			buf.put2("  #%d: \xCE\x94pc=%d ", i, x[i]);
			buf.put3("valcount=%d popcount=%d \xCE\x94stp=%d\n", x[i+1], x[i+2], x[i+3]);
		}
		System.puts(buf.extract());
	}
	def assert(pc: int, dpc: int, valcount: int, popcount: int, dstp: int) {
		assert_entries([dpc, valcount, popcount, dstp], func.sidetable);
	}
	def assert_entries(expected: Array<int>, got: Array<int>) {
		if (expected.length % 4 != 0) return t.fail("expected 4 words per entry");
		if (expected.length != got.length) return t.fail2("expected length = %d, got %d", expected.length, got.length);
		for (i = 0; i < expected.length; i += 4) {
			assert_elem("\xCE\x94pc", expected, got, i, 0);
			assert_elem("valcount", expected, got, i, 1);
			assert_elem("popcount", expected, got, i, 2);
			assert_elem("\xCE\x94stp", expected, got, i, 3);
		}
	}
	def assert_elem<T>(quantity: string, expected: Array<T>, got: Array<T>, i: int, d: int) {
		if (expected[i+d] != got[i+d]) {
			var msg = StringBuilder.new()
				.put2("expected [%d].%s = ", i/4, quantity)
				.put2("%d, got %d", expected[i+d], got[i+d])
				.toString();
			t.fail(msg);
		}
	}
	def v() -> CodeValidator {
		return CodeValidator.new(extensions,
			Limits.new().set(extensions),
			module,
			ErrorGen.new(module.filename));
	}
}

def K = Opcode.I32_CONST.code;
def BR = Opcode.BR.code;
def END = Opcode.END.code;
def BLOCK = Opcode.BLOCK.code;
def LOOP = Opcode.LOOP.code;
def IF = Opcode.IF.code;
def ELSE = Opcode.ELSE.code;
def N = BpTypeCode.EmptyBlock.code;
def I = BpTypeCode.I32.code;

def test_raw1(t: SidetableTester) {
	var b = SidetableBuilder.new();
	var ce = ControlEntry.new();
	ce.start_pos = 20;
	ce.params = SigCache.arr_v;
	ce.results = SigCache.arr_v;
	b.refV(ce, 55, 0, 0);
	b.refV(ce, 56, 1, 1);
	b.refV(ce, 66, 3, 4);
	b.bind(ce, 60, 0);
	t.assert_entries([
		5, 0, 0, 0,
		4, 1, 1, -4,
		-6, 3, 4, -8
	], b.extract());
}

def test_raw2(t: SidetableTester) {
	var b = SidetableBuilder.new();
	var ce = ControlEntry.new();
	ce.start_pos = 30;
	ce.val_stack_top = 1;
	ce.params = SigCache.arr_v;
	ce.results = SigCache.arr_i;
	var val_stack = ArrayStack<ValueType>.new();
	val_stack.push(ValueType.I32);
	val_stack.push(ValueType.I32);

	b.refS(ce, 35, val_stack.top); // 2 elems -> 1 val, pop 0

	val_stack.push(ValueType.I32);
	b.refS(ce, 36, val_stack.top); // 3 elems -> 1 val, pop 1

	val_stack.push(ValueType.I32);
	b.refS(ce, 66, val_stack.top); // 4 elems -> 1 val, pop 2

	b.bind(ce, 50, 0);

	t.assert_entries([
		15, 1, 0, 0,
		14, 1, 1, -4,
		-16, 1, 2, -8
	], b.extract());
}

def test_br0(t: SidetableTester) {
	t.sig(SigCache.v_v);
	t.codev([BR, 0]);
	t.assert(1, 2, 0, 0, 4);

	t.codev([BR, 0, BR, 0]);
	t.assert_entries([
		4, 0, 0, 8,
		2, 0, 0, 4
	], t.func.sidetable);

	t.sig(SigCache.i_i);
	t.codev([K, 0,
		BR, 0]);
	t.assert(3, 2, 1, 0, 4);

	t.codev([K, 3,
		BR, 0,
		K, 4,
		BR, 0]);
	t.assert_entries([
		6, 1, 0, 8,
		2, 1, 0, 4
	], t.func.sidetable);

	t.codev([K, 3,
		K, 3,
		BR, 0,
		K, 4,
		BR, 0]);
	t.assert_entries([
		6, 1, 1, 8,
		2, 1, 0, 4
	], t.func.sidetable);
}

def test_br1(t: SidetableTester) {
	t.sig(SigCache.v_v);
	t.codev([BLOCK, N, BR, 0, END]);
	t.assert(3, 2, 0, 0, 4);

	t.codev([BLOCK, N, BR, 1, END]);
	t.assert(3, 3, 0, 0, 4);

	t.codev([BLOCK, N, BLOCK, N, BR, 1, END, END]);
	t.assert(5, 3, 0, 0, 4);

	t.codev([BLOCK, N, BLOCK, N, BR, 2, END, END]);
	t.assert(5, 4, 0, 0, 4);
}

def test_brN(t: SidetableTester) {
	t.sig(SigCache.v_v);
	var code = Vector<byte>.new();
	for (depth < 7) {
		for (j < depth) {
			code.resize(0);
			for (i < depth) code.put(BLOCK).put(N);
			var pc = code.length + 1;
			code.put(BR).put(byte.!(j));
			for (i < depth) code.put(END);
			t.codev(code.extract());
			t.assert(pc, 2 + j, 0, 0, 4);
		}
	}
}

def test_if0(t: SidetableTester) {
	t.sig(SigCache.v_v);
	t.codev([K, 0, IF, N, ELSE, END]);
	t.assert_entries([
		3, 0, 0, 8,
		1, 0, 0, 4
	], t.func.sidetable);
}

def test_relative(t: SidetableTester) {
	t.sig(SigCache.v_v);
	def code: Array<byte> = [K, 0, IF, N, ELSE, END];
	t.code(code);
	var v = t.v();
	var d = DataReader.new([0, 0, 0, 0]);
	d.putk(0, code, 0, code.length);
	d.skipN(3);  // make sure entries are encoded relative to start pos.
	v.validate(t.func, d);
	t.assert_entries([
		3, 0, 0, 8,
		1, 0, 0, 4
	], t.func.sidetable);
}

def test_br_table0(t: SidetableTester) {
	t.sig(SigCache.v_v);
	t.codev([K, 1,
		Opcode.BR_TABLE.code, 2,
		0, 0, 0]);
	t.assert_entries([
		3, 0, 0, 0,
		4, 0, 0, 12,
		3, 0, 0, 8,
		2, 0, 0, 4
	], t.func.sidetable);
}

def test_br_loop_val(t: SidetableTester) {
	t.sig(SigCache.v_i);
	t.codev([LOOP, I,
		K, 0,
		BR, 0,
		END]);
	t.assert(5, -4, 0, 1, 0);
}
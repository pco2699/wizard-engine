// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component X86_64LinuxExeTest {
	new() {
		// This target has an additional tier to test!
		TestTiers.register("jit:", X86_64SpcAotStrategy.new()); // XXX: s/jit/spc
		// This target needs to preprocess modules, even for the interpreter
		TestTiers.preprocess = Target.setTieredEntrypoint;

		for (strategy in [
			("spc:aot:", X86_64SpcAotStrategy.new()),
			("spc:lazy:", X86_64SpcLazyStrategy.new()),
			("int:dyn", X86_64DynamicStrategy.new())]) {

			var newTester = ExeTester.new(_, strategy.1);
			for (test in [
				("empty", test_empty),
				("unreachable", test_unreachable),
				("i32.add", test_i32_add),
				("load_oob0", test_load_oob0),
				("load_oob0", test_call1005)
				]) {
				// register strategy/test pair
				UnitTests.registerT(strategy.0, test.0, newTester, test.1);
			}
		}
	}

}

// Tests specific compilation strategies such as AOT, lazy, dynamic tier up.
def X: Array<Value>;
def NONE = BpTypeCode.EmptyBlock.code;

def test_empty(i: ExeTester) {
	i.sig(SigCache.v_v).code([])
		.assert_nop(X);
}

def test_unreachable(i: ExeTester) {
	i.code([Opcode.UNREACHABLE.code])
		.assert_trap(X, TrapReason.UNREACHABLE);
}

def test_nop(i: ExeTester) {
	i.sig(SigCache.v_v).code([Opcode.NOP.code])
		.assert_nop(X);
}

def test_i32_add(i: ExeTester) {
	i.sig(SigCache.ii_i).code([
		Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.I32_ADD.code]);
	i.assert_ii_i((0xFF89520F, 9999999), 2222222);
}

def test_load_oob0(i: ExeTester) {
	i.addMemory(0, Max.Set(0));
	i.sig(SigCache.i_i);
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.I32_LOAD.code, 0, 0]);
	i.assert_r([Value.I32(0)], Traps.result(TrapReason.MEM_OUT_OF_BOUNDS));
}
def test_call1005(i: ExeTester) {
	var f17 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]).func_index);
	i.sig(SigCache.i_i);
	i.codev([
		Opcode.LOOP.code, BpTypeCode.EmptyBlock.code,
		Opcode.CALL.code, f17,
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 1,
		Opcode.I32_SUB.code,
		Opcode.LOCAL_TEE.code, 0,
		Opcode.I32_EQZ.code,
		Opcode.BR_IF.code, 1,
		Opcode.BR.code, 0,
		Opcode.END.code,
		Opcode.UNREACHABLE.code
	]);
	i.assert_i_i(5, 17);
	i.assert_i_i(1000, 17);
}
